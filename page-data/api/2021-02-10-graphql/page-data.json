{"componentChunkName":"component---src-templates-blog-post-js","path":"/api/2021-02-10-graphql/","result":{"data":{"site":{"siteMetadata":{"title":"재영 블로그","author":"jaeyoung-son","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"cac0990d-971f-557e-a5bd-1bf60f3e69c8","excerpt":"GraphQL GraphQL 이란 Server API를 구성하기 위해 페이스북에서 만든 Query Language 입니다. Server API Server API란 요청을 하면 요청에 따른 응답을 주는 Endpoint(API가 서버에서 리소스에 접근할 수 있도록 가능하게 하는 URL, 주소)를 웹을 통해 노충하는것을 말합니다. 요청 ----> 응답 Server API를 만드는 방법론으로 REST API가 있으며 RESTful API에관해서는 이전에 정리를 하였습니다. API…","html":"<h1 id=\"graphql\" style=\"position:relative;\"><a href=\"#graphql\" aria-label=\"graphql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL</h1>\n<p>GraphQL 이란 Server API를 구성하기 위해 페이스북에서 만든 Query Language 입니다.</p>\n<h3 id=\"server-api\" style=\"position:relative;\"><a href=\"#server-api\" aria-label=\"server api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server API</h3>\n<p>Server API란 요청을 하면 요청에 따른 응답을 주는 Endpoint(API가 서버에서 리소스에 접근할 수 있도록 가능하게 하는 URL, 주소)를 웹을 통해 노충하는것을 말합니다.<br>\n요청 ----> 응답<br>\nServer API를 만드는 방법론으로 REST API가 있으며 RESTful API에관해서는 이전에 정리를 하였습니다.</p>\n<h3 id=\"api란\" style=\"position:relative;\"><a href=\"#api%EB%9E%80\" aria-label=\"api란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API란?</h3>\n<p>Application Programming Interface 즉 응용프로그램 프로그래밍 인터페이스 입니다.\n응용프로그램에서 사용할 수 있도록 운영체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 의미합니다.<br>\n또한 데이터베이스 관리 시스템과 같은 시스템 프로그램과 통신할 때 사용되는 언어나 메시지 형식을 가지며,\n주로 파일 제어, 창 제어, 화상 처리, 문자 제어등을 위한 인터페이스를 제공합니다.</p>\n<h3 id=\"restful-api\" style=\"position:relative;\"><a href=\"#restful-api\" aria-label=\"restful api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API</h3>\n<p>REpresentational State Transfer<br>\n말 그대로 셀프서술식이며 모든 리소스들을 하나의 엔드포인트에 연결해놓고, 각각의 엔드포인트들은 해당 리소스와 관련된 내용만 관리하며\n엔드포인트를 리소스 관련해서 이름을 짓고 http 메소드로 행위를 정의하는 방식입니다.</p>\n<h3 id=\"graphql에-관하여\" style=\"position:relative;\"><a href=\"#graphql%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC\" aria-label=\"graphql에 관하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL에 관하여</h3>\n<p>Graph Query Language의 줄임말 입니다.<br>\n쿼리 랭귀지란 말 그대로 정보를 얻기 위해 질의문(쿼리)을 만들기 위해 사용되는 컴퓨터 언어의 일종입니다.</p>\n<h4 id=\"왜-페이스북은-graphql을-만들었을까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B6%81%EC%9D%80-graphql%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EC%9D%84%EA%B9%8C\" aria-label=\"왜 페이스북은 graphql을 만들었을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 페이스북은 GraphQL을 만들었을까?</h4>\n<ul>\n<li>RESTful API로 다양한 기기에서 필요한 정보를 일일히 구현하는 것에대한 어려움</li>\n<li>ios 와 android에서 필요한 정보가 다른 상황이 있다면 그 다른 부분마다 API를 구현하는 것에대한 어려움</li>\n</ul>\n<h2 id=\"graphql과-restful의-차이\" style=\"position:relative;\"><a href=\"#graphql%EA%B3%BC-restful%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"graphql과 restful의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL과 RESTful의 차이</h2>\n<ol>\n<li>GraphQL은 주로 하나의 엔드포인트를 사용한다.\nRESTful은 리소스마다 하나의 엔드포인트를 가지고 있지만, GraphQL은 전체 API를 위해 하나의 엔드포인트만 사용합니다.</li>\n<li>GraphQL은 요청할 때 사용한 쿼리문에 따라 응답의 구조가 달라진다.\nRESTful은 하나의 엔드포인트에서 받는 응답의 구조가 정해져 있는 경우가 많습니다. 즉 이미 정해놓은 구조로 응답이 오게 됩니다.\n그에 비해 GraphQL은 사용자가 응답의 구조를 자신이 원하는 방식으로 바꿀 수 있습니다.</li>\n</ol>\n<h4 id=\"overfetch-underfetch\" style=\"position:relative;\"><a href=\"#overfetch-underfetch\" aria-label=\"overfetch underfetch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overfetch Underfetch</h4>\n<ul>\n<li>Overfetch: 요청에 대한 응답이 필요한 정보보다 많은 정보를 받는것을 말하며, API의 세분화가 제대로 이루어지지 않았을때 생깁니다.</li>\n<li>Underfetch: 오버페치와 반대로 API를 구체적으로 세분화하여 하나의 API에서 필요한 정보를 다 응답받지 못해 여러번 요청을 해야할 경우입니다.</li>\n</ul>\n<h2 id=\"장단점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장단점</h2>\n<p>둘의 차이로 인하여 각각의 장단점이 생기게 됩니다.</p>\n<h4 id=\"graphql의-장점\" style=\"position:relative;\"><a href=\"#graphql%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"graphql의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQl의 장점</h4>\n<ol>\n<li>HTTP 요청의 횟수를 줄일 수 있다.\nRESTful은 각 리소스별로 요청을 해야하고, 따라서 요청 횟수가 필요한 자원의 종류에 비례합니다.\n반면 GraphQL은 원하는 정보를 하나의 쿼리에 모두 담아 요청하는것이 가능합니다.</li>\n<li>HTTP 응답의 Size를 줄일 수 있다.\nRESTful은 응답의 형태가 정해져있고, 따라서 필요한 정보만 부분적으로 요청하는것이 어렵습니다.\n반면 GraphQL은 원하는 대로 정보를 요청하는 것이 가능합니다.</li>\n</ol>\n<h4 id=\"graphql의-단점\" style=\"position:relative;\"><a href=\"#graphql%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"graphql의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL의 단점</h4>\n<ol>\n<li>고정된 요청과 응답만 필요할 경우에는 쿼리로 인해 요청의 크기가 REST에 비해 커진다.</li>\n<li>파일 전송 등 텍스트 만으로 하기 힘든 내용들을 처리하기 복잡하다.</li>\n<li>재귀적인 쿼리가 불가능하다.</li>\n</ol>\n<h2 id=\"상황에-맞게-사용하기\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%99%A9%EC%97%90-%EB%A7%9E%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"상황에 맞게 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상황에 맞게 사용하기</h2>\n<h4 id=\"graphql-1\" style=\"position:relative;\"><a href=\"#graphql-1\" aria-label=\"graphql 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL</h4>\n<ul>\n<li>서로 다른 모양의 다양한 요청들에 대해 응답할 수 있어야 하는 상황</li>\n<li>대부분의 요청이 CRUD에 해당될 때</li>\n</ul>\n<h4 id=\"restful\" style=\"position:relative;\"><a href=\"#restful\" aria-label=\"restful permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful</h4>\n<ul>\n<li>HTTP(HTTPS)에 의한 캐싱을 잘 사용하고 싶을 때</li>\n<li>파일 전송 등 단순한 텍스트로 처리되지 않는 요청들이 있을 때</li>\n<li>요청의 구조가 정해져 있을 때</li>\n</ul>\n<p>즉 어느 하나가 좋다라고 할 수 없고, 주어진 환경에 따라서 어떤 조건에서 쓰는지, 어떠한 목표를 가지고 사용하는지에 따라서\n각각의 방식의 장단점에 맞춰서 사용하는것이 중요합니다.</p>\n<h2 id=\"database\" style=\"position:relative;\"><a href=\"#database\" aria-label=\"database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Database</h2>\n<p>데이터를 저장 및 보존하는 시스템입니다.\n어플리케이션에서는 데이터가 메모리 상에서 존재하고 메모리에 존재하는 데이터는 보존이 되지 않습니다.\n따라서 어플리케이션이 종료되면 메모리에 있던 데이터는 다시 읽을 수 없습니다.</p>\n<h2 id=\"왜-데이터베이스를-사용할까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"왜 데이터베이스를 사용할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 데이터베이스를 사용할까?</h2>\n<p>기존에 파일로 데이터를 저장할때는 파일저장 특성상 성능, 보안, 편의성에 한계가 있습니다.\n이 한계를 극복하기 위해 고안된것이 데이터베이스 입니다.</p>\n<h2 id=\"nosql\" style=\"position:relative;\"><a href=\"#nosql\" aria-label=\"nosql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQL</h2>\n<p>비관계형 타입의 데이터를 저장할때 주로 사용되는 데이터베이스 시스템입니다.<br>\n비관계형이기에 데이터들을 저장하기 전에 정의할 필요가 없습니다.</p>\n<ul>\n<li>장점</li>\n<li>데이터 구조를 미리 정의하지 않아도 되기에 데이터의 구조 변화에 유연합니다.</li>\n<li>확장성이 상대적으로 좋습니다.</li>\n<li>방대한 양의 데이터를 저장하는데 유리합니다.</li>\n<li>단점</li>\n<li>데이터의 완전성이 상대적으로 덜 보장됩니다.</li>\n<li>트랜잭션이 안되거나 불안정합니다.</li>\n</ul>\n<h2 id=\"관계형-데이터베이스rdbms-relational-database-management-sysntem\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4rdbms-relational-database-management-sysntem\" aria-label=\"관계형 데이터베이스rdbms relational database management sysntem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관계형 데이터베이스(RDBMS Relational Database Management Sysntem)</h2>\n<p>관계형 데이터 모델에 기초를 둔 데이터베이스 시스템을 말합니다.\n데이터들 끼리 서로 상호관련성을 가진 형태료 표현하며, 모든 데이터들은 테이블로 표현되고, 각각의 테이블은 로우와 컬럼으로 구성됩니다.</p>\n<ul>\n<li>로우는 각 항목들의 실제 값 열</li>\n<li>컬럼은 테이블들의 각 항목 행</li>\n<li>각 로우는 고유키(Primary Key)가 있고 고유키를 통해 해당 로우를 찾거나 인용(reference)한다</li>\n</ul>\n<p>테이블의 연결은 3가지 종류가 있습니다.</p>\n<ol>\n<li>one to one\n테이블 A의 로우와 테이블B의 로우가 정확히 일대일 매칭이 되는 관계</li>\n<li>one to many\n테이블 A의 로우가 테이블 B의 여러 로우와 연결이 되는 관계<br>\n한 유저가 여러 제품을 구매함. 구매된 제품은 한 고객 뿐</li>\n<li>many to many\n테이블 A의 여러 로우가 테이블 B의 여러 로우와 연결이 되는 관계\n책은 여러 작가에 의해 쓰일 수 있고 작가들은 여러 책을 쓸 수 있음</li>\n<li>장점</li>\n<li>관계형 데이터베이스는 데이터를 더 효율적, 체계적으로 저장할 수 있습니다.</li>\n<li>트랜잭션이 용이합니다.</li>\n<li>미리 저장하는 데이터들의 구조(테이블 스키마)를 정의해 데이터의 완전성이 보장됩니다.</li>\n<li>단점</li>\n<li>테이블을 미리 정의해야하기에 테이블 구조 변화 등에 유연하지 못합니다.</li>\n<li>확장성이 상대적으로 나쁩니다. (미리 구조가 정의되어 있기 때문)</li>\n</ol>\n<h2 id=\"sql\" style=\"position:relative;\"><a href=\"#sql\" aria-label=\"sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL</h2>\n<p>Structured Query Language<br>\nMysql과 같은 관계형 데이터베이스에서 데이터를 읽거나 생성 및 수정하기위해 사용하는 언어입니다.</p>\n<h2 id=\"mysql-명령어-정리\" style=\"position:relative;\"><a href=\"#mysql-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC\" aria-label=\"mysql 명령어 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL 명령어 정리</h2>\n<ul>\n<li>접속</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd /usr/local/mysql/bin 해당 디렉토리 이동\nMySQL 서버 활성화 (환경설정)\n./mysql -urrot -p (패스워드)</code></pre></div>\n<ul>\n<li>데이터베이스 목록확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>데이터베이스 삭제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span>dbname<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>해당 데이터베이스 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">USE</span> <span class=\"token punctuation\">[</span>dbname<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>테이블 목록확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>테이블 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> topic<span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">-- 아이디 정수 11글자까지 보여줌 공백허용안함 자동으로 증가시키는옵션</span>\n    title <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">-- 100글자에서 자른다</span>\n    <span class=\"token comment\">-- NULL 은 값이없는걸허용</span>\n    description <span class=\"token keyword\">TEXT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    created <span class=\"token keyword\">DATETIME</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    author <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    profile <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">-- 아이디를 프라이머리 키(메인 키 , 중복방지)로 지정</span></code></pre></div>\n<ul>\n<li>테이블 구조 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DESC</span> <span class=\"token punctuation\">[</span>table_name<span class=\"token punctuation\">]</span>topic 테이블 구조를 보여줌</code></pre></div>\n<ul>\n<li>테이블에 로우 삽입</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> topic <span class=\"token punctuation\">(</span>\n   title<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> created<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> profile<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>‘’Mysql”<span class=\"token punctuation\">,</span>  “MySQL <span class=\"token operator\">is</span> …”<span class=\"token punctuation\">,</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> “재영”<span class=\"token punctuation\">,</span> “devloper”<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- NOW()는 현재시간 아이디는 오토인크리먼트 값지정안하면 자동으로 올라감</span></code></pre></div>\n<ul>\n<li>테이블의 정보 가져오기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">[</span>table_name<span class=\"token punctuation\">]</span>topic<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 해당 테이블의 모든 데이터를 가져옴</span>\n<span class=\"token keyword\">SELECt</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> topic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> created<span class=\"token punctuation\">,</span> author <span class=\"token keyword\">FROM</span> topic <span class=\"token keyword\">WHERE</span> author<span class=\"token operator\">=</span>‘재영’ <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> id <span class=\"token keyword\">DESC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nU</code></pre></div>\n<ul>\n<li>테이블 로우의 값 업데이트</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> <span class=\"token punctuation\">[</span>table_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span> <span class=\"token keyword\">SET</span> title<span class=\"token operator\">=</span>‘’Oracle”<span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span>“Oracle <span class=\"token operator\">is</span> …” <span class=\"token keyword\">WHERE</span> id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 아이디가 2번인 토픽테이블의 로우의 타이틀과 디스크립션을 업데이트</span></code></pre></div>\n<ul>\n<li>테이블의 로우 삭제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> topic <span class=\"token keyword\">Where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 토픽에서 아이디가 5번인 로우 삭제</span></code></pre></div>\n<ul>\n<li>테이블의 이름 변경</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TABLE</span> table_name <span class=\"token keyword\">TO</span> changed_name<span class=\"token punctuation\">(</span>topic_backup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"sql-join\" style=\"position:relative;\"><a href=\"#sql-join\" aria-label=\"sql join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL JOIN</h3>\n<p>한 테이블이 아닌 양쪽(여러) 테이블에서 로우를 읽고 싶을 떄는 join문을 사용해서\nForeign Key(외부키)로 걸려있는 2개의 table들을 연결해서 읽습니다.\n교집합의 느낌과 비슷합니다.</p>\n<ul>\n<li>기본 문법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n  테이블별칭<span class=\"token punctuation\">.</span>조회할칼럼<span class=\"token punctuation\">,</span>\n  테이블별칭<span class=\"token punctuation\">.</span>조회할칼럼\n<span class=\"token keyword\">FROM</span> 기준테이블 별칭\n<span class=\"token keyword\">INNER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">LEFT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">JOIN</span> 조인테이블 별칭 <span class=\"token keyword\">ON</span> 기준테이블별칭<span class=\"token punctuation\">.</span>기준키 <span class=\"token operator\">=</span> 조인테이블별칭<span class=\"token punctuation\">.</span>기준키</code></pre></div>\n<h4 id=\"유형\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%98%95\" aria-label=\"유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유형</h4>\n<ul>\n<li>(INNER) JOIN: 일반적인 join문으로서 기준이 되는 테이블과 조인이 걸리는 테이블 양쪽 모두에 매칭되는 로우만 선택이 됩니다.</li>\n<li>LEFT (OUTER)JOIN: 기준이 되는 테이블의 모든 로우와 조인이 걸리는 테이블 중 기준이 되는 테이블과 매칭되는 로우만 선택됩니다.</li>\n<li>RIGHT JOIN: 조인이 걸리는 테이블의 모든 로우와 기준이 되는 테이블 에서 걸리는테이블과 매칭되는 로우만 선택됩니다.</li>\n<li>FULL JOIN: 기준이 되는 테이블과 조인이 걸리는 테이블 양쪽 모두의 로우가 선택됩니다.</li>\n</ul>\n<p>위 외에도 몇가지 조인들이 더 있으나, 주로 위의 조인들만 사용됩니다.</p>\n<ul>\n<li>LEFT JOIN 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">[</span>table_name<span class=\"token punctuation\">]</span>topic <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">]</span>author <span class=\"token keyword\">ON</span> topic<span class=\"token punctuation\">.</span>author_id <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>id</code></pre></div>\n<p>토픽의 author 아이디와 author의 아이디가 같은것들끼리 같은 행에 두고 토픽테이블을 기준으로 author 테이블을 걸어서 레프트 조인합니다..</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> topic<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> created<span class=\"token punctuation\">,</span> name <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">[</span>table_name<span class=\"token punctuation\">]</span>topic <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">]</span>author <span class=\"token keyword\">ON</span> topic<span class=\"token punctuation\">.</span>author_id <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>id</code></pre></div>\n<p>author도 아이디가있고, 토픽도 아이디가 있어서 그냥 id 하면 애매하다고 에러가납니다.\ntopic.id AS topic<em>id 라고하면 컬럼명을 topic</em>id라고 보여줍니다.</p>\n<h4 id=\"mysql-공식문서-팁-하나하나\" style=\"position:relative;\"><a href=\"#mysql-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-%ED%8C%81-%ED%95%98%EB%82%98%ED%95%98%EB%82%98\" aria-label=\"mysql 공식문서 팁 하나하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mysql 공식문서 팁 하나하나</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ALL</span> <span class=\"token operator\">|</span> DISTICT <span class=\"token operator\">|</span> DISCTICT <span class=\"token keyword\">ROW</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>usage에서 대괄호로 묶여있으면 생략이 가능하다는 뜻</p>","frontmatter":{"title":"GraphQL","date":"February 10, 2021"}}},"pageContext":{"slug":"/api/2021-02-10-graphql/","previous":{"fields":{"slug":"/development/2021-01-25---browser/"},"frontmatter":{"title":"브라우저, DNS","category":"DNS","draft":false}},"next":{"fields":{"slug":"/http/2021-02-13---http_method/"},"frontmatter":{"title":"HTTP 응답 코드와 메소드","category":"HTTP method","draft":false}}}},"staticQueryHashes":["3128451518","3498048237"]}