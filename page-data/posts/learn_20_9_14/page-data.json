{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/learn_20_9_14/","result":{"data":{"markdownRemark":{"id":"4d6ced24-fe8d-58e0-87ab-ee385b6f54df","html":"<h2 id=\"카카오-주소찾기-적용기\"><a href=\"#%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%A3%BC%EC%86%8C%EC%B0%BE%EA%B8%B0-%EC%A0%81%EC%9A%A9%EA%B8%B0\" aria-label=\"카카오 주소찾기 적용기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카카오 주소찾기 적용기</h2>\n<p>카카오 주소검색은 매우 유용하게 사용이 가능하다. 별도의 키를 발급받을 필요가 없고,\n사용량에 제한도 없으며 기업용이던 상업적 용도이던 무료로 확인기 가능하며,\n도로명 주소, 지번 주소, 영문 주소까지도 모두 확인이 가능하다. PC 및 모바일 웹 환경에서도\n지원하게 되어있다. 사용하지 않을 이유가 없다. 처음엔 검색창에 kakao라고 쓰여있어서\n카카오 디벨롭 에서 내용을 찾았는데 없었다. 알고보니 다음에 따로 가이드가 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>index.html에 스크립트를 하나 추가해준다.<br>\n검색창을 띄우는 방법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">daum<span class=\"token punctuation\">.</span>Postcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">oncomplete</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분입니다.</span>\n    <span class=\"token comment\">// 예제를 참고하여 다양한 활용법을 확인해 보세요.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>가이드 페이지에 주석과 설명이 잘 되어있어서 이해하기 편했다. 일반적으로 검색창을 띄우고\ninput에 상세값을 맞춰주는 예제는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sample4_execDaumPostcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">daum<span class=\"token punctuation\">.</span>Postcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">oncomplete</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.</span>\n\n                <span class=\"token comment\">// 도로명 주소의 노출 규칙에 따라 주소를 표시한다.</span>\n                <span class=\"token comment\">// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.</span>\n                <span class=\"token keyword\">var</span> roadAddr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>roadAddress<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 도로명 주소 변수</span>\n                <span class=\"token keyword\">var</span> extraRoadAddr <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참고 항목 변수</span>\n\n                <span class=\"token comment\">// 법정동명이 있을 경우 추가한다. (법정리는 제외)</span>\n                <span class=\"token comment\">// 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>bname <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token regex\">/[동|로|가]$/g</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>bname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    extraRoadAddr <span class=\"token operator\">+=</span> data<span class=\"token punctuation\">.</span>bname<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 건물명이 있고, 공동주택일 경우 추가한다.</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>buildingName <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>apartment <span class=\"token operator\">===</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                   extraRoadAddr <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>extraRoadAddr <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>buildingName <span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>buildingName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>extraRoadAddr <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    extraRoadAddr <span class=\"token operator\">=</span> <span class=\"token string\">' ('</span> <span class=\"token operator\">+</span> extraRoadAddr <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">// 우편번호와 주소 정보를 해당 필드에 넣는다.</span>\n                document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sample4_postcode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>zonecode<span class=\"token punctuation\">;</span>\n                document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample4_roadAddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> roadAddr<span class=\"token punctuation\">;</span>\n                document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample4_jibunAddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>jibunAddress<span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 참고항목 문자열이 있을 경우 해당 필드에 넣는다.</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>roadAddr <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample4_extraAddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> extraRoadAddr<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample4_extraAddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">var</span> guideTextBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"guide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>autoRoadAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> expRoadAddr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>autoRoadAddress <span class=\"token operator\">+</span> extraRoadAddr<span class=\"token punctuation\">;</span>\n                    guideTextBox<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'(예상 도로명 주소 : '</span> <span class=\"token operator\">+</span> expRoadAddr <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n                    guideTextBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>autoJibunAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> expJibunAddr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>autoJibunAddress<span class=\"token punctuation\">;</span>\n                    guideTextBox<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'(예상 지번 주소 : '</span> <span class=\"token operator\">+</span> expJibunAddr <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n                    guideTextBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    guideTextBox<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n                    guideTextBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같은 함수를 onClick내에서 실행시키면 검색창을 띄울 수 있다. 단 위와같이\n.open()으로 창을 띄우게 되면 모바일에서는 새창이 떠서 사용자경험 측면에서 안좋을 수 있다.\n그래서 다음 카카오맵에선 타겟하나를 찝어 타겟내에 iframe을넣어 검색창을 띄우도록 embed()를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">...</span>\n<span class=\"token comment\">// 타겟으로 삼을 상태 정의</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">,</span> setTarget<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setTarget<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'address_modal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위와 같은 방식은 리액트에서 ref의 변경사항을 수신하고 싶을때 적용해주는 방법.<br>\n주소정보에 관한 상태들을 useReducer로 관리.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    address<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    detailAddress<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    postNumber<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    state<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>온클릭시 주소검색창 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">openAddr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// scroll 위치를 저장</span>\n\n  <span class=\"token keyword\">const</span> currentScroll <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">daum<span class=\"token punctuation\">.</span>Postcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">oncomplete</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> addr <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소 변수</span>\n      <span class=\"token keyword\">let</span> extraAddr <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참고항목 변수</span>\n\n      <span class=\"token comment\">//사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>userSelectedType <span class=\"token operator\">===</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 사용자가 도로명 주소를 선택했을 경우</span>\n        addr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>roadAddress<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 사용자가 지번 주소를 선택했을 경우(J)</span>\n        addr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>jibunAddress<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>userSelectedType <span class=\"token operator\">===</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>bname <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token regex\">/[동|로|가]$/g</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>bname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          extraAddr <span class=\"token operator\">+=</span> data<span class=\"token punctuation\">.</span>bname<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 건물명이 있고, 공동주택일 경우 추가한다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>buildingName <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>apartment <span class=\"token operator\">===</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          extraAddr <span class=\"token operator\">+=</span>\n            extraAddr <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>buildingName <span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>buildingName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extraAddr <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          extraAddr <span class=\"token operator\">=</span> <span class=\"token string\">' ('</span> <span class=\"token operator\">+</span> extraAddr <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'address'</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> extraAddr<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'state'</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>sido<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>sigungu<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'address'</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> <span class=\"token string\">'extraAddr'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'state'</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>sido<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>sigungu<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'postNumber'</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>zonecode<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'address'</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token punctuation\">:</span> addr<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 우편번호 찾기 화면이 보이기 이전으로 scroll 위치를 되돌린다.</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> currentScroll<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">embed</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>처음에는 지번주소를 클릭했을때 상태값이 동기화 안되었는데 애초에 함수에서 분기해서 처리가\n되길래 그에맞춰서 dispatch를 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setTarget<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'address_modal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'modal_header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n                    <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>foldDaumPostcode<span class=\"token punctuation\">}</span></span>\n                    <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close_btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n                  <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                    x\n                  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>아이프레임 모달이 켜지면 닫는 버튼이 없으므로. 커스타마이징 해서 닫는 버튼을넣어주며\n클릭 시 모달을 끈다.</p>\n<h2 id=\"react-datepicker-달력-라이브러리에-한글-적용\"><a href=\"#react-datepicker-%EB%8B%AC%EB%A0%A5-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%97%90-%ED%95%9C%EA%B8%80-%EC%A0%81%EC%9A%A9\" aria-label=\"react datepicker 달력 라이브러리에 한글 적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-datepicker 달력 라이브러리에 한글 적용</h2>\n<p>흔히 널리 사용되는 달력 라이브러리들이 몇몇 있지만 기본적으로 한글이 적용되는\n라이브러리는 거의 없을것이다. 그래서 조금 더 세팅을 해주어 달력에 한글을 입혀야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> DatePicker<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> registerLocale <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-datepicker\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Date<span class=\"token punctuation\">,</span> setDate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>DatePicker\n        locale<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setDate<span class=\"token punctuation\">}</span>\n        minDate<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 과거 날짜 disable</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>달력에 좋고 유용한 기능들이 굉장히 많고 locale속성 registerLocale설정을 통해 달력에 한글을\n전달할 수 있다. 하지만 라이브러리내에 한글정보가 없어서 전달할 수 없다.<br>\n하지만 date-fns에서 달력에 한글정보를 지원을 해준다. 그래서 해당 한글모듈을 불러와\n적용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> DatePicker<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> registerLocale <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-datepicker\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ko <span class=\"token keyword\">from</span> <span class=\"token string\">'date-fns/locale/ko'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">registerLocale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ko'</span><span class=\"token punctuation\">,</span> ko<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 등록</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>DatePicker\n        locale<span class=\"token operator\">=</span><span class=\"token string\">'ko'</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setDate<span class=\"token punctuation\">}</span>\n        minDate<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 과거 날짜 disable</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와같이 적용해주면 한글이 적용된 달력을 확인할 수 있다.</p>\n<h2 id=\"인풋-첫글자-자동-완성-대문자\"><a href=\"#%EC%9D%B8%ED%92%8B-%EC%B2%AB%EA%B8%80%EC%9E%90-%EC%9E%90%EB%8F%99-%EC%99%84%EC%84%B1-%EB%8C%80%EB%AC%B8%EC%9E%90\" aria-label=\"인풋 첫글자 자동 완성 대문자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인풋 첫글자 자동 완성 대문자</h2>\n<p>모바일 기기에서 해당 브라우저를 사용하며 다양한 변수가 생기는데, ios 사파리에서 접속해서 input에 영어를\n작성하게되면, 첫글자가 자동으로 대문자로 들어갔다. 지웠다 쓰기를 반복해도 자꾸 대문자로 들어갔다.\n그래서 짐작하건데 간단한 속성 하나 추가해주면 해결 될 것 같아 알아보았다.</p>\n<h3 id=\"autocapitalize\"><a href=\"#autocapitalize\" aria-label=\"autocapitalize permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>autocapitalize</h3>\n<p>input 속성에는 autocapitalize라는 속성이 있는데, 해당 속성을 추가해주면 첫글자 대문자 자동완성을 하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">autocapitalize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>off<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 autocapitalize속성을 추가하면 된다.</p>\n<h2 id=\"사파리-기기에서-첫글자가-자동으로-대문자가-된다면\"><a href=\"#%EC%82%AC%ED%8C%8C%EB%A6%AC-%EA%B8%B0%EA%B8%B0%EC%97%90%EC%84%9C-%EC%B2%AB%EA%B8%80%EC%9E%90%EA%B0%80-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EB%8C%80%EB%AC%B8%EC%9E%90%EA%B0%80-%EB%90%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"사파리 기기에서 첫글자가 자동으로 대문자가 된다면 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사파리 기기에서 첫글자가 자동으로 대문자가 된다면?</h2>\n<p>결제페이지를 작업하는중에 모바일 환경도 작업을 하는데, 사파리에서 키면 자꾸 영어의 첫 글자가 대문자로 자동 완성이 되었습니다.<br>\n따라서 불필요하게 자동완성이 된다면 해당 기능을 지워야 하는데 그에대한 처리는 input 의 속성으로 간단하게 처리할 수 있었습니다.</p>\n<h3 id=\"autocapitalize-1\"><a href=\"#autocapitalize-1\" aria-label=\"autocapitalize 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>autoCapitalize</h3>\n<p>인풋의 autoCapitalize속성을 추가하여 위의 문제를 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n               <span class=\"token attr-name\">autoCapitalize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">...</span>\n             <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이제 자동으로 대문자가 완성되지 않습니다.</p>\n<h2 id=\"input-필드의-읽기전용-속성\"><a href=\"#input-%ED%95%84%EB%93%9C%EC%9D%98-%EC%9D%BD%EA%B8%B0%EC%A0%84%EC%9A%A9-%EC%86%8D%EC%84%B1\" aria-label=\"input 필드의 읽기전용 속성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>input 필드의 읽기전용 속성</h2>\n<p>사용자 정보를 입력하는 input 필드를 작업하며 주소 정보가 있었는데, 주소 정보는 daum주소 api 검색을 통하여 정보를 입력하고 처리하였습니다. 근데 input의 value 입력은\n일반적으로 입력하는게 아닌 검색한 값을 바탕으로 입력이 이루어져야 했는데, 따라서 input의 기본 입력자체를 막을 필요가 있었습니다. 그래서 input의 readOnly 속성을 활용\n하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 주소 입력 input</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n  <span class=\"token attr-name\">autoCapitalize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">[</span><span class=\"token function\">checkTitle</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">readOnly</span>\n  <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">checkTitle</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input_form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>openAddr<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"usestate-callback-사용하기\"><a href=\"#usestate-callback-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"usestate callback 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState callback 사용하기</h2>\n<p>react class형 컴포넌트에서는 setState로 상태값을 바꾸면서 콜백을 전달해 상태값을 변경한뒤 해당 내용 실행이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 그냥 실행하면?</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 콜백으로 실행하기</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>종종 함수형 컴포넌트로 useState hook을 사용하면서 왜 클래스형 setState에 있는 기능이 함수형 setState에는 없을까\n생각은 해보았지만, 해당 비동기 처리 문제를 안만나게끔 처리하면 되지 라는 생각으로 그냥 넘겼었는데, 이번에는 해당 기능을\n함수형 컴포넌트에서도 사용해보기로 하였습니다.</p>\n<h3 id=\"useeffect-의존성-배열을-활용하기\"><a href=\"#useeffect-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B0%B0%EC%97%B4%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"useeffect 의존성 배열을 활용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect 의존성 배열을 활용하기</h3>\n<p>useEffect를 사용하면 위와같은 효과를 낼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 useEffect의 의존성 배열에 해당 상태를 넣어주면 해당 상태값이 바뀐뒤 실행하기에\n마운트가 되고 number를 1로 바꾸고, console.log가 실행되어 1이 찍히게 됩니다.<br>\n근데 아직 부족합니다. 해당 console.log는 첫 마운트에도 찍히기 떄문입니다.\n위의 문제를 해결하려면 첫 렌더링을 확인하는 ref변수를 관리해서 해결이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isFirstRender <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  isFirstRender<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFirstRender<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 처럼 ref변수로 첫 마운트에 false로 바꿔주고 해당 변수가 false일때만 실행하면,\n첫 렌더링에는 console.log를 하지 않습니다.<br>\n<a href=\"https://stackoverflow.com/questions/56247433/how-to-use-setstate-callback-on-react-hooks\">https://stackoverflow.com/questions/56247433/how-to-use-setstate-callback-on-react-hooks</a></p>\n<h2 id=\"리액트-타입스크립트-name-of-undefined-에러\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-name-of-undefined-%EC%97%90%EB%9F%AC\" aria-label=\"리액트 타입스크립트 name of undefined 에러 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트, 타입스크립트 name of undefined 에러</h2>\n<p>리액트 타입스크립트 개발을 진행하다 갑자기 아래와 같은 에러가 생겼습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">line: 0 parse error cannot read property name of undefined</code></pre></div>\n<p>name이라는 프로퍼티를 사용하지 않았는데 왜 undefined의 name에 접근했다는거지??? 라는 의문을\n가지다가, 해당 에러관련해서 찾아보았는데 찾은 이유는 리액트스크립트 버전에 비해 타입스크립트 버전이\n낮아서 생기는 오류라고 합니다. package.json을 확인해보니 타입스크립트 버전이 밀려있었습니다. 따라서</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm uninstall typescript\nnpm install typescript</code></pre></div>\n<p>패키지를 지운 뒤, 다시 인스톨 해줘서 버전을 맞춰주니 해당 에러가 사라졌습니다.</p>\n<h2 id=\"withrouter를-통해-history-객체를-받아올때-타입-매칭\"><a href=\"#withrouter%EB%A5%BC-%ED%86%B5%ED%95%B4-history-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%9B%EC%95%84%EC%98%AC%EB%95%8C-%ED%83%80%EC%9E%85-%EB%A7%A4%EC%B9%AD\" aria-label=\"withrouter를 통해 history 객체를 받아올때 타입 매칭 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>withRouter를 통해 history 객체를 받아올때 타입 매칭</h2>\n<p>타입스크립트에서 history객체를 받아올때 타입 매칭이 잘 안되어 any로 작업을 했었는데, 타입 지정을 해주기 위해\n매칭방법을 알아보았습니다. 방법은 간단했는데, ‘react-router-dom’에서 RouteComponentProps 라는 타입을\n제공해주었습니다. 해당타입을 활용하여 history매칭이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RouteComponentProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 일단 react-router-dom 에서 해당 interface를 불러온다</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">childComponentProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteComponentProps</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>any</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 나머지 props들</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n//인터페이스를 정의하며 위에서 불러온 RouteComponentsProps 를 extends 한다.\n\nconst getHistory: React.SFC</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>childComponentProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = ({ history, ...otherProps }) => </span><span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n// history를 받아올 컴포넌트에 위에서 정의한 interface를 적용시킨다.\nexport default withRouter(getHistory);</span></code></pre></div>\n<p>위와같이 정의해주면 history객체에 대한 타입매칭을 해줄 수 있습니다. RouteComponentProps인터페이스가\n어떻게 정의되었는지 node_modules에서 확인해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RouteComponentProps</span><span class=\"token operator\">&lt;</span>\n  Params <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Params<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StaticContext</span> <span class=\"token operator\">=</span> StaticContext<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>LocationState\n<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  history<span class=\"token punctuation\">:</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>History<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  location<span class=\"token punctuation\">:</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>Location<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  match<span class=\"token punctuation\">:</span> match<span class=\"token operator\">&lt;</span>Params<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  staticContext<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 형태를 가지고 있습니다. 그렇군요.. history,location, match 등 withRouter로 감싸줄때 받는 정보를 가지고 있습니다.</p>\n<h2 id=\"브라우저-새탭에서-열기-새창에서-열기\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%83%88%ED%83%AD%EC%97%90%EC%84%9C-%EC%97%B4%EA%B8%B0-%EC%83%88%EC%B0%BD%EC%97%90%EC%84%9C-%EC%97%B4%EA%B8%B0\" aria-label=\"브라우저 새탭에서 열기 새창에서 열기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 새탭에서 열기, 새창에서 열기</h2>\n<p>javascript를 사용해서 브라우저 새탭으로 열기, 새창으로 열기를 적용할일이 생겨서 알아보게 되었습니다.\n생각처럼 간단하게 적용이 가능했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위처럼 window.open()함수를 사용하면 함수 실행 시 새창에서 입력한 link로 브라우저가 열리게됩니다.\n그렇다면 새탭에서 열려면?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_blank'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>두 번째 파라미터에 ’_blank’를 입력해주면 새창이 아닌, 새탭에서 입력한 link로 브라우저가 오픈됩니다.</p>\n<h2 id=\"모바일-사파리에서-키보드가-나올때-포지션-깨짐현상\"><a href=\"#%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%82%AC%ED%8C%8C%EB%A6%AC%EC%97%90%EC%84%9C-%ED%82%A4%EB%B3%B4%EB%93%9C%EA%B0%80-%EB%82%98%EC%98%AC%EB%95%8C-%ED%8F%AC%EC%A7%80%EC%85%98-%EA%B9%A8%EC%A7%90%ED%98%84%EC%83%81\" aria-label=\"모바일 사파리에서 키보드가 나올때 포지션 깨짐현상 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모바일 사파리에서 키보드가 나올때 포지션 깨짐현상</h2>\n<p>아이폰에서 접속 시 input을 클릭했을떄, 키보드가 나오는데 그 키보드가 올라오면서 input에 포커스가 되는게 아니라,\n스크롤을 내리고 input을 클릭할때 스크롤이 내려가있는 문제가 생겼습니다.\n해결해나가며 이것 저것 많이 시도해보았는데, 삽질을 많이하여 정리해보려고 합니다.<br>\n일단 처음에 든 생각. 스크롤이 내려간다면 그냥 포커스가 되었을때 스크롤을 input이 있는곳으로\n올려주면 되지 않을까? 라는 생각을 했고, 실제로 스택오버플로우에도 비슷한 내용이 많았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inputFocus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">,</span> setTarget<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setTarget<span class=\"token punctuation\">}</span></span>  <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일단 input 요소를 ref로 잡아줍니다. 그리고 스크롤을 올려주는 솔루션들은 다양하게 있었는데 하나씩 적용해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  target<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    behavior<span class=\"token punctuation\">:</span> <span class=\"token string\">'smooth'</span><span class=\"token punctuation\">,</span>\n    block<span class=\"token punctuation\">:</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>scrollIntoView를 적용해보았는데, 작동하지 않았습니다 이유는 모르겠네요… deprecated되었다는 말도 있고…\n정확한건 찾지 못했습니다 일단 오작동</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"> <span class=\"token punctuation\">{</span>\n    inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onfocus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>onfocus라는게 있었네요. 포커스가 될 때 해당 함수를 실행합니다. 콘솔로그를 찍어보면 잘 찍히는데, 스크롤은 그대롭니다.\n콘솔이 찍히는걸보면 스크롤자체가 안되는건가 싶기도 했고, 잘 모르겠습니다.<br>\n인풋 폼 클릭시 핸들링하던 state값이 하나가 있었는데 그 값을 활용해보기로 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>changedState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>네. 안됩니다. 해당 상태값이 바뀔때 스크롤을 최상단으로 올려도 작동하지 않습니다. 이쯤되서 깨달음을 얻은것이 하나가 있는데,\n화면 상단에 위치한 input폼은 position fixed로 고정시켜놓았는데, 어떻게\n밀려날 수 있지? 라는 생각을하다가 해당 내용을 알아보니 모바일 사파리에서 키보드가 올라오면 position fixed는 적용이 안된다고 합니다.\n그래서 키보드가 올라올때 fixed를 absolute로 바꿔보고 했지만. 역시 되지 않습니다.\n이쯤되면 기능들을 추가할때 콘솔도 잘 찍히겠다.. 윈도우의 스크롤이 문제인가? 스크롤 라이브러리를 적용해서 스크롤을 올려보기로 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> animateScroll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-scroll'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nonClick=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          animateScroll<span class=\"token punctuation\">.</span><span class=\"token function\">scrollToTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> smooth<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>해당 라이브러리를 사용하니 스크롤이 정상적으로 input이 포커싱 될 때 올라갑니다. 역시 스크롤이 문제였습니다..\n항상 데스크탑웹이랑 모바일에서의 웹은 다르게 작동해서 어려운 부분이 많은데, 이번 버그도 정확히 원인을 파악하거나 하지는 못했지만 확실히 기억해둬야 겠습니다.</p>\n<h2 id=\"웹팩에서-public폴더-사용하기\"><a href=\"#%EC%9B%B9%ED%8C%A9%EC%97%90%EC%84%9C-public%ED%8F%B4%EB%8D%94-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"웹팩에서 public폴더 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹팩에서 public폴더 사용하기</h2>\n<p>CRA프로젝트를 진행할때에는 json 목데이터나 static한 파일들을 public폴더에 넣어두고, 프로젝트 내에서 해당 public폴더에\n접근이 가능해서 유용하게 사용했던 기억이 있습니다. 그래서 이번 작업에서도 public폴더를 사용해보려고 하는데,\n접근이 안되었습니다. 웹팩으로 셋팅이 되어있는데, CRA에서 public폴더를 사용할 수 있게 해주는구나 생각이 들었는데.. 그럼 어떻게 웹팩에서\n해당 내용을 적용할까 알아보앗습니다.</p>\n<h4 id=\"copy-webpack-plugin\"><a href=\"#copy-webpack-plugin\" aria-label=\"copy webpack plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>copy-webpack-plugin</h4>\n<p>웹팩에 copy-webpack-plugin이 있는데 위 플러그인은 이미 존재하는 개인적인 파일이나 디렉토리를 빌드 디렉토리에 복제한다. 라고\n소개하고있습니다. 복제를 하면 될까? 일단 설치해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install copy-webpack-plugin --save-dev</code></pre></div>\n<p>문서를 확인해보니 사용법이 나와있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const CopyPlugin = require(&#39;copy-webpack-plugin&#39;);\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        { from: &#39;source&#39;, to: &#39;dest&#39; },\n        { from: &#39;other&#39;, to: &#39;public&#39; },\n      ],\n    }),\n  ],\n};</code></pre></div>\n<p>webpack.config.js에서 위와같이 사용하라네요 프로젝트에 적용해봅니다. 처음에 stackoverflow에서 먼저 내용을 보았는데\n스택오버플로우에 나와있는 방법들은 조금 오래되서 현버전에 적용이 안되는듯합니다. 객체안에 patterns의 키에 옵션을 넣어주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> CopyWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 불러오기</span>\n<span class=\"token operator\">...</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> patterns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'public'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>옵션의 필수값은 from 하나 인 것 같습니다. to어디로 복제할지 옵션은 기본값이 웹팩 output의 경로 라고 나와있습니다.\n이제 public디렉토리에 mock json 데이터를 만들어봅니다.<br>\n/public/data/mock.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"테스트를 해보자\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>데이터를 만들고 해당 json 데이트럴 불러옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">...</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ho'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'http://localhost:8080/dist/data/mock.json'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>콘솔을 찍어보면 json 데이터가 정상적으로 잘 들어오고 있는것이 확인이 됩니다. webpack output의 값이 dist이기에 dist경로로\n들어가있는것을 확인할 수 있습니다.</p>\n<h2 id=\"리액트-다중-요소-ref값-붙인-뒤-확인하기\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%8B%A4%EC%A4%91-%EC%9A%94%EC%86%8C-ref%EA%B0%92-%EB%B6%99%EC%9D%B8-%EB%92%A4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"리액트 다중 요소 ref값 붙인 뒤 확인하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 다중 요소 ref값 붙인 뒤 확인하기</h2>\n<p>ref는 항상 다루기 까다롭고 톡톡 튀는 느낌입니다. 항상 고생을 많이 하는데 useRef를 사용하여\n여러 요소에 ref를 다는 방법은 이전에도 정리를 했지만, 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Ref</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> refs <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span>\n  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 해당ref들이 붙은 시점에서 무언가를 실행해야 한다면??</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Ref</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> refs <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>refs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span>\n  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>useEffect의 의존성 배열에refs를 넣어주고 console.log를 해보면, 바뀐 값이\n확인이 되지 않습니다. 생각 해보면 refs객체의 current key에 dom요소들이 담기는데,\nrefs객체는 변하지 않기 떄문</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Ref</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> refs <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span>\n  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>current값 까지 넣어주게 되면?? 응 안돼~ 라고 합니다. current값이 변하는 값이며 변하기는\n하지만, useEffect가 발생하는 시점이 레이아웃이 모두 그려지고, ref값이 요소에 붙었을거라는\n보장은 못하는듯 합니다. ref가 붙을때는 요소들의 레이아웃이 모두 그려진 뒤, 그 후 약간의 텀이 지난 뒤 붙는것 같습니다.\n가끔 콘솔을 보면 current값이 null이라고 나오는데, 클릭해보면 요소들이 붙어는 있고.. 붙는 과정인것같습니다.\nref객체는 우리에게 ref값의 변화를 알려주지 않습니다.</p>\n<p>위의 해결방안으로 state를 활용하는 방법인데,</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Ref</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">,</span> setTarget<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span>\n  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setTarget<span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>setState함수를 콜백 ref로 전달해주면, target값의 변화를 잡을 수 있습니다. 여기서\n그렇다면 여러 요소들을 위의 방법으로 담을 수 있을까가 문제인데, 해당 콜백ref를 전달하는 부분에서\nsetTarget의 인자로 배열을 활용해 요소들의 ref값들을 넣어주어도, 계속 추가가되거나 하나만 추가되거나 하는 문제들이\n있었습니다. 그래서 일단 잡은 솔루션은 변화를 관찰하는 상태값 하나를 만든 뒤,</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Ref</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> refs <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">,</span> setTest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span>\n  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ho'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>요소의 마지막에서 해당 임시 상태값을 바꿔주면 캐치가 가능해집니다. 가 상태를 하나 만들고\n사용해야한다는게, 확실하며 효울적인 접근법은 아닌느낌이 강하지만, 일단 현재까지 찾은 솔루션은\n위의 방법으로 사용하는 것 입니다.</p>\n<h2 id=\"create-react-app-빌드와-사용자정의-경로\"><a href=\"#create-react-app-%EB%B9%8C%EB%93%9C%EC%99%80-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%A0%95%EC%9D%98-%EA%B2%BD%EB%A1%9C\" aria-label=\"create react app 빌드와 사용자정의 경로 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create-react-app 빌드와 사용자정의 경로</h2>\n<p>cra에서 빌드 시 모듈 파일들이 바라보는 경로를 설정하려면? 일단 기본적으로 cra로 프로젝트를 만들고,\nnpm run start를 하여 프로젝트를 실행하면 body의 스크립트 태그에</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/static/js/name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위와 같이 절대 경로로 파일이 불러와 집니다. 하지만 커스텀경로로 불러오고 싶다면? eject를 하여 webpack을 설정하는건\n까다로운 작업이 될 것 같고… 간단한 방법이 있나 알아보았습니다.</p>\n<h3 id=\"homepage\"><a href=\"#homepage\" aria-label=\"homepage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>homepage</h3>\n<p>package.json에 homepage라는 내용을 넣어서 빌드 후 경로설정을 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"homepage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와같이 homepage를 설정해준뒤, 경로를 확인해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./static/js/name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>경로가 바뀐 모습을 확인할 수 있습니다.<br>\n원래 빌드 파일이 상대 경로로 지정되어있어서 모듈을 불러오지 못하는 문제 때문에 알아보게 되었는데, 해당 경로를 절대경로로 수정한 뒤\n문제를 해결하며 알아보게 되었습니다.</p>","fields":{"slug":"/posts/learn_20_9_14/","tagSlugs":["/tag/learn/"]},"frontmatter":{"date":"2020-09-14T12:10:32.169Z","description":"학습 내용 정리, useState","tags":["learn"],"title":"학습 내용 정리"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/learn_20_9_14/"}}}