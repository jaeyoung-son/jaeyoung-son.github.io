{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/js_calculation/","result":{"data":{"markdownRemark":{"id":"6448c431-8f40-53ab-aec3-b9a69a7fbb71","html":"<h2 id=\"자바스크립트-연산자-관련-정리\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90-%EA%B4%80%EB%A0%A8-%EC%A0%95%EB%A6%AC\" aria-label=\"자바스크립트 연산자 관련 정리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 연산자 관련 정리</h2>\n<p>JSX문법을 다시보다가 자바스크립트의 연산자는 사용이 가능하나 선언문은 불가능하다는 내용에서 연산자가 정확히 감이 오지 않았다… 그저 삼항연산자, 조건부연산자는 사용이 가능하고 변수 선언, 일반 조건문은 사용이 안된다 정도로만 생각하고 있었기에 정리를 해본다.</p>\n<h3 id=\"연산자의-종류\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"연산자의 종류 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연산자의 종류</h3>\n<ol>\n<li>할당 연산자\n할당 연산자는 오른쪽 피연산자의 값을 왼쪽 피연산자에 할당한다. 기본적인 할당 연산자는 오른쪽의 피연산자 값을 왼쪽 피연산자 값에 할당하는 등호이다(=) 즉 X = Y</li>\n<li>\n<p>비교 연산자\n비교 연산자는 피연산자들을 비교하고 비교에 따라 논리 값을 반환한다. 피연산자들은 숫자, 문자열, 논리형, 객체를 사용할 수 있다. 문자열은 유니코드 값을 사용하여 표준 사전순서를 기반으로 비교한다. 만약 두 피연산자가 다른 형태일경우, javascript는 대부분 비교를 위해 피연산자를 적절한 타입으로 변환한다. 형태를 바꾸기의 유일한 예외는 엄격한 비교를 수행하는 === 과 !== 연산이 관련된 경우.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>산술 연산자\n산술 연산자는 숫자값을 피연산자로 갖고, 하나의 숫자 값을 반환한다. 기본적인 산술연산자는 덧셈, 뺄셈, 곱셉, 나눗셈이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5</span></code></pre></div>\n</li>\n<li>비트 연산자\n비트 연산자는 피연산자를 10진수, 16진수, 8진수처럼 취급하지 않고 32비트의 집합으로 취급한다. 예로 10진수의 9는 2진수의 1001로 나타낼 수 있다. javascript의 표준 숫자값을 반환한다.</li>\n<li>\n<p>논리 연산자\n논리 연산자는 보통 불리언값과 사용된다. 또한 불리언값과 사용할때 불리언 값을 반환한다.\n그러나 &#x26;&#x26;과 || 연산자는 실제로 명시된 피연산자들 중 하나를 반환한다. 이 연산자들이 다른 값과 쓰였을떄, 불리언 값이 아닌 다른 값을 반환할지도 모른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4반환</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'반환값'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '반환값' 반환</span></code></pre></div>\n</li>\n<li>\n<p>문자열 연산자\n문자열 값으로 사용될 수 있는 비교 연산자에 덧붙여서, 연결 연산자(+)는 두 문자열 값을 연결하고, 두 문자열이 합쳐진 새로운 문자열을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'my string'</span></code></pre></div>\n<p>복합 할당 연산자인 +=또한 문자열을 연결하는데 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'jaeyoung'</span><span class=\"token punctuation\">;</span>\nstring <span class=\"token operator\">+=</span> <span class=\"token string\">'son'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'jaeyoungson'</span></code></pre></div>\n</li>\n<li>\n<p>조건(삼항) 연산자\n조건 연산자는 Javascript에서 3개의 항을 사용하는 유일한 연산자이다. 조건 연산자는 조건에 따라 2개의 값중 하나를 가질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">조건 ? 값1 : 값2</code></pre></div>\n<p>조건이 참이라면 값1을 값으로 갖고, 그렇지 않다면 값2를 값으로 갖는다.</p>\n</li>\n<li>\n<p>쉼표 연산자\n쉼표 연산자(,)는 두 피연산자를 평가하고, 마지막 피연산자의 값을 반환한다. 이 연산자는 주로 for반복문 안에서 각각의 시간에 복수의 변수들을 갱신하기 위해 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> ㅑ<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a['</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">']['</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">']= '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// a[0][9] = 9</span>\n<span class=\"token comment\">// a[1][8] = 8</span>\n<span class=\"token comment\">// a[2][7] = 7</span>\n<span class=\"token comment\">// a[3][6] = 6</span>\n<span class=\"token comment\">// a[4][5] = 5</span></code></pre></div>\n<p>a는 각 변에 10개의 원소가 있는 2차원 배열일떄, 콤마 연산자를 두 변수에 한번에 증가 시키기 위해 사용했다. 이 코드는 배열의 대각선에 위치한 원소를 출력한다.</p>\n</li>\n<li>단항 연산자\n단항 연산자는 오직 하나의 피연산자를 가지고 연산을한다.\ndelete연산자, typeof연산자, void연산자 등이 있다.</li>\n<li>관계 연산자\n관계 연산자는 피연산자들을 비교하고, 비교의 참 여부에 기반하여 불리언 값을 반환한다.\nin연산자, instanceof연산자가 있다.</li>\n</ol>\n<p>일단 종류가 굉장히 많고 지금 당장 다 이해하고 숙달하기엔 무리일것같다.. 일단 정리를 하고 차차 학습해야겠다.</p>\n<h3 id=\"문법적-카테고리\"><a href=\"#%EB%AC%B8%EB%B2%95%EC%A0%81-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC\" aria-label=\"문법적 카테고리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법적 카테고리</h3>\n<p>자바스크립트에는 대표적으로 2가지 문법적 카테고리가 있다.</p>\n<ol>\n<li>statements 문장</li>\n<li>ㄷxpressions 표현식</li>\n</ol>\n<p>표현식은 문장처럼 동작할 수 있기 때문에 이 둘을 구분하는것이 중요하다. 반대로 문장은 표현식처럼 동작할 수 없다.</p>\n<h3 id=\"표현식\"><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"표현식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현식</h3>\n<p>표현식은 값을 만들어낸다. 원하는만큼 길어질 수 있으며 언제나 동일한 값이 나오진 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">funtionCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncheck <span class=\"token operator\">?</span> <span class=\"token function\">AFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">BFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\ndeclaredVariable<span class=\"token punctuation\">;</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">functionCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같은 코드들은 표현식이기에 자바스크립트 코드 중 값이 들어가는 곳이면 어디에나 넣을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(true &amp;&amp; 1 + 2)</code></pre></div>\n<p>표현식은 반드시 상태를 바꿀 필요는 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> variable <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문장</span>\nvariable <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 표현식</span></code></pre></div>\n<h3 id=\"문장\"><a href=\"#%EB%AC%B8%EC%9E%A5\" aria-label=\"문장 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문장</h3>\n<p>문장은 기본적으로 무언가를 수행한다. 자바스크립트에서 문장은 값이 들어와야 할 곳에 들어갈 수 없다.함수의 인자, 대입연산의 값, 연산자의 피연산자로 사용될 수 없다.</p>\n<h4 id=\"종류들\"><a href=\"#%EC%A2%85%EB%A5%98%EB%93%A4\" aria-label=\"종류들 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종류들</h4>\n<ol>\n<li>if</li>\n<li>if-else</li>\n<li>while</li>\n<li>do-while</li>\n<li>for</li>\n<li>switch</li>\n<li>for-in</li>\n<li>debugger</li>\n<li>variable declaration</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>브라우저의 콘솔에 위와같은 코드를 작성하면 18이 보이지만 위 코드를 표현식처럼 사용하거나 값이 들어갈 어딘가에 넣을 수 없다.</p>\n<h3 id=\"함수-선언-표현식-네임드-함수-표현식\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8-%ED%91%9C%ED%98%84%EC%8B%9D-%EB%84%A4%EC%9E%84%EB%93%9C-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"함수 선언 표현식 네임드 함수 표현식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언, 표현식, 네임드 함수 표현식</h3>\n<p>함수 선언은 문장이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> fc<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 표현식은 표현식이다. 흔히 익명 함수라 부르는 것들.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‘’</span></code></pre></div>\n<p>네임드 함수 표현식은 표현식이다. 익명함수와 같으나 이름이 붙는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‘myName’</span></code></pre></div>\n<p>??? 다음과 같이 정리되었다.<br>\n우리가 자바스크립트에서 값이 들어올 곳에 함수를 선언할 때마다, 자바스크립트는 그것을 값으로 다루려 할것입니다. 만일 그 함수가 값으로 사용될 수 없다면, 에러가 발생할 것입니다.\n반면에 스크립트, 모듈, 블록 문장(자바스크립트에서 값이 들어가는 곳이 아닌 위치에 있는)의 전역 단계(global level)에 함수를 선언하는 것은 결과적으로 함수 선언이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \t<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 블록의 가장 상위레벨, 함수선언</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 전역레벨, 함수선언</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 블록의 가장상위레벨, 함수선언</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 네임드 함수 표현식</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 익명 함수 표현식</span></code></pre></div>\n<p>확실히 난해한 부분이 있는것같다. 아직 확 와닿지는 않는다.</p>\n<h3 id=\"표현식을-문장으로-바꾼다---표현식문장\"><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EB%AC%B8%EC%9E%A5%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%BC%EB%8B%A4---%ED%91%9C%ED%98%84%EC%8B%9D%EB%AC%B8%EC%9E%A5\" aria-label=\"표현식을 문장으로 바꾼다   표현식문장 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현식을 문장으로 바꾼다 — > 표현식문장</h3>\n<p>단순히 표현식 뒤에 세미콜론을 추가해주면 그 줄 자체는 표현식 문장이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token comment\">// 표현식</span>\n<span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 표현식 문장</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 에러</span></code></pre></div>\n<h3 id=\"세미콜론과-콤마-연산자\"><a href=\"#%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0%EA%B3%BC-%EC%BD%A4%EB%A7%88-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"세미콜론과 콤마 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세미콜론과 콤마 연산자</h3>\n<p>세미콜론을 붙이면, 여러 줄의 문장을 하나의 줄에 넣을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a<span class=\"token punctuation\">;</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>콤마 연산자는 여러 개의 표현식을 연결할 수 있도록 도와준다. 반환은 마지막 표현식만 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function () {}</span></code></pre></div>\n<h3 id=\"즉시-호출되는-함수-표현식\"><a href=\"#%EC%A6%89%EC%8B%9C-%ED%98%B8%EC%B6%9C%EB%90%98%EB%8A%94-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"즉시 호출되는 함수 표현식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>즉시 호출되는 함수 표현식</h3>\n<p>익명 함수는 표현식으로 쓰일 수 있다. 자바스크립트에서 값이 들어갈 곳에 쓰일 수 있다면, 자바스크립트에서 값이 들어갈 곳에 괄호를 쓸 수 있다면 익명 함수를 값으로 넘길 수 있다는 말.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// error</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// f () {}</span></code></pre></div>\n<p>익명함수를 괄호 속에 넣는다면 즉시 같은 익명 함수를 리턴하는데 그렇기에 이 함수를 바로 불러올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hi</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>‘나를 리턴해라’<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ‘나를 ‘리턴해라</span></code></pre></div>\n<p>확실히 편하게 다가오는 느낌은 아니었다. 뭐든 그렇지만 차근차근 이해를 해야겠습니당.\n참고 mdn<br>\n<a href=\"https://velog.io/@jakeseo_me/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-33%EA%B0%80%EC%A7%80-%EA%B0%9C%EB%85%90-7-%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%EB%AC%B8Statement-%EB%B2%88%EC%97%AD-2xjuhvbal7\">https://velog.io/@jakeseo_me/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-33%EA%B0%80%EC%A7%80-%EA%B0%9C%EB%85%90-7-%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%EB%AC%B8Statement-%EB%B2%88%EC%97%AD-2xjuhvbal7</a></p>","fields":{"slug":"/posts/js_calculation/","tagSlugs":["/tag/javascript/"]},"frontmatter":{"date":"2020-05-20T12:10:32.169Z","description":"자바스크립트 연산자 정리하기","tags":["javascript"],"title":"자바스크립트 연산자"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/js_calculation/"}}}