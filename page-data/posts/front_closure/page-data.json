{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/front_closure/","result":{"data":{"markdownRemark":{"id":"a63686ec-256a-5a16-9cc8-b81d28f0094c","html":"<p>클로저 파헤치기</p>\n<h2 id=\"closure\"><a href=\"#closure\" aria-label=\"closure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>closure</h2>\n<p>일단 closure 사전적 의미로는 폐쇠란다. 무엇을 폐쇠한다는건지는 잘 모르겠지만 한번 보다 보면 이래서 이름이 클로저구나 느낌이 온다.<br>\n클로저는 자바스크립트에서 함수가 가지는 여러 특징들로 인해 생겨나는 특별한 함수이다. 아주 혼란스럽지만 동시에 아주 유용한 개념.\n그렇기에 정리를 해보자<br>\n함수에서 이전에 배웠던 스코프 개념을 적용할때</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'재영이'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>func함수 안에 선언된 변수 value는 함수스코프의 변수이기에 바깥에서 value로 접근해도 값 ‘재영이’를 조회할 수 없고 함수 바깥에 value를 선언해도, 안쪽의 value에는 영향을 주지 못한다.<br>\n자바스크립트에서 함수는 1급이다. 1급이란 함수가 다른 값들과 똑같이 값으로서 취급되는게 가능하다는 것이다. 그렇기에 함수는 리턴값으로 함수를 리턴하는것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'재영이'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">consoleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> consoleValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// func의 리턴값을 result변수에 할당</span>\n<span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '재영이'</span></code></pre></div>\n<p>재영이값이 들어있는 value변수는 함수스코프 변수기에 외부에 노출되지 않는 값이었다. 함수 result는 함수스코프 바깥에 있지만 안쪽값에 접근할수 있는 상태가되었다. 함수스코프안의 변수에 외부에서 접근할 수 있게 해주는 함수를 클로저라고한다.</p>\n<h3 id=\"클로저-활용하기\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"클로저 활용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저 활용하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeClosure</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">initialValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> innerValue <span class=\"token operator\">=</span> initialValue<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> innerValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> getValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>makeClosure함수는 하나의 인자를 받고 받은 값으로 innerValue라는 변수에 담은다음에 같은함수스코프인 getValue함수만이 innerValue에 접근이 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getInnerValue <span class=\"token operator\">=</span> <span class=\"token function\">makeClosure</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕 클로저야'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getInnerValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === '안녕 클로저야'</span>\ninnerValue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>이렇게 함수 내부의 값을 조회하는것 뿐아니라 값을 수정할수도 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeClosure</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">initialValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> innerValue <span class=\"token operator\">=</span> initialValue<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> innerValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setValue</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">nextValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    innerValue <span class=\"token operator\">=</span> nextValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> getValue<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> setValue\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> innerData <span class=\"token operator\">=</span> <span class=\"token function\">makeClosure</span><span class=\"token punctuation\">(</span><span class=\"token string\">'첫번째값'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninnerData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === '첫번째값'</span>\ninnerData<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'바뀐값'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninnerData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === '바뀐값'</span></code></pre></div>\n<p>setValue라는 함수를 만들어 인자로 들어온 값으로 innverValue의 값을 대체했다. 값을 읽는 것과 수정하는 것 두 함수를 내보내기 위해 함수가 담긴 객체를 리턴하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> staticCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> localCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">increase</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">++</span>staticCount<span class=\"token punctuation\">,</span>\n          local<span class=\"token punctuation\">:</span> <span class=\"token operator\">++</span>localCount\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">decrease</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">--</span>staticCount<span class=\"token punctuation\">,</span>\n          local<span class=\"token punctuation\">:</span> <span class=\"token operator\">--</span>localCount\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> counter2 <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { static: 1 , local: 1}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { static: 2 , local: 2}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter2<span class=\"token punctuation\">.</span><span class=\"token function\">decrease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { static: 1 , local: -1}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { static: 2 , local: 3}</span></code></pre></div>\n<p>count 함수 안에 있는 변수 staticCount 와 count함수가 return하는 함수에 선언된 localCount 변수가 있다.\ncount함수가 리턴하는 함수 기준으로 staticCount 변수는 스코프 밖에 있으므로 counter1과 counter2가 값을 공유한다. 하지만 리턴함수내 선언된 localCount는 각각의 지역변수를 갖고 각각의 값을 가진다.</p>\n<h3 id=\"클로저의-장단점\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"클로저의 장단점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저의 장단점</h3>\n<p>이와같이 클로저는 함수스코프 내에서 변수를 숨기면서 밖에서도 접근할 수 있게 해주기에 전역변수를 사용하지않고 유용하게 쓸 수 있다. 하지만 장점만 있을순 없고 단점이 있을것이다.<br>\n클로저의 단점이란???</p>\n<ul>\n<li>클로저는 메모리를 소모한다\nsetTimeout이나 이벤트에 대한 콜백함수 등으로 등록했던 함수들이 메모리에 계속 남아있게 되면, 클로저도 같이 메모리에 계속 남아있게 된다. 그렇기에 루프돌면서 클로저를 생성하는 설계는 지양해야한다.</li>\n<li>스코프 생성과 이후 변수 조회에 따른 퍼포먼스 손해가 있다.\n클로저의 하위에 있는 함수에서 상위에 있는 변수에 접근하고자 할 때 클로저로 생성한 스코프를 탐색해야 하는 문제가 있다. 최근 자바스크립트 엔진들이 이러한 스코프 체인 내의 변수 탐색에 대한 최적화를 하고있어서\n스코프 체인이 하나나 두 개이면 큰 차이는 없다고 하나 과하게 사용하면 퍼포먼스에 영향을 미친다.</li>\n<li>클로저에 익숙하지 않은사람이면 이해하기 어렵다</li>\n</ul>\n<p>오늘 클로저에 대해 공부를 해보았다. 처음에는 생소하고 어려웠지만 기본적인 느낌은 오는듯하다.\n함수 스코프 내에서 변수를 선언하고 그 함수 내에서 변수에 접근하고 접근하는것을 함수에서 리턴해서 밖에서 조회나 수정을 한다. 스코프 체인이나 이런개념은 아직 이해가 잘 되지 않는다. 공부할것이 참 많다. 열심히해야겠다.</p>","fields":{"slug":"/posts/front_closure/","tagSlugs":["/tag/javascript/"]},"frontmatter":{"date":"2020-03-12T12:10:32.169Z","description":"스터디. 클로저에 대해","tags":["javascript"],"title":"프론트 스터디 클로저"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/front_closure/"}}}