{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/learned_5-05/","result":{"data":{"markdownRemark":{"id":"23347ff7-ed2e-57c6-a313-8192f9cfc1e2","html":"<h2 id=\"그날그날-배운것들을-기록하자\"><a href=\"#%EA%B7%B8%EB%82%A0%EA%B7%B8%EB%82%A0-%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4%EC%9D%84-%EA%B8%B0%EB%A1%9D%ED%95%98%EC%9E%90\" aria-label=\"그날그날 배운것들을 기록하자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그날그날 배운것들을 기록하자.</h2>\n<h2 id=\"스크롤바-없애기\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A1%A4%EB%B0%94-%EC%97%86%EC%95%A0%EA%B8%B0\" aria-label=\"스크롤바 없애기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크롤바 없애기</h2>\n<p>보통 웹에서 특정 설정을 해주지 않으면 내용물이 뷰포트 크기를 넘을떄 스크롤이 생긴다 세로로 넘으면 세로스크롤, 가로로 넘기면 가로스크롤이 생긴다. 때에따라서 이 스크롤바를 보여주고싶지 않을 떄가 있다.<br>\n몇가지 css를 적용해주면 스크롤바를 숨길 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-ms-overflow-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 와 Edge */</span>\n  <span class=\"token property\">scrollbar-width</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* firefox */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box::-webkit-scrollbar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* chrome, safari, opera */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>브라우저별 셋팅이 조금씩 다르니 참고해야한다.</p>\n<h2 id=\"스크롤-이벤트시-쓰로틀-적용\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8B%9C-%EC%93%B0%EB%A1%9C%ED%8B%80-%EC%A0%81%EC%9A%A9\" aria-label=\"스크롤 이벤트시 쓰로틀 적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크롤 이벤트시 쓰로틀 적용</h2>\n<p>스크롤이벤트를 적용하면 사용자가 스크롤을 할때마다 감지되고 실행이 된다. 단순 콘솔로그만 찍어도 콘솔이 어마어마하게 많이 실행되는것을 알 수 있다. 스크롤 감지 자체가 큰 부담이 아니라고는 하지만 나름 줄여줄 수 있으면 깔끔하게 적용해보려고 하였다.<br>\n보통 throttle과 debounce를 이용하여 시간이 지남에 따라 함수를 몇번 실행할지 제어하는데 두개는 차이를 가지고있다.</p>\n<h3 id=\"디바운스\"><a href=\"#%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4\" aria-label=\"디바운스 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디바운스</h3>\n<p>디바운스는 그룹화하여 특정시간이 지난 후 하나의 이벤트만 발생하도록 하는 것 즉, 순차적 호출을 하나의 그룹으로 그룹화 한다. 연이어 호출되는 함수중 가장 마지막이나 가장 처음만 호출하도록 하는것.</p>\n<h3 id=\"쓰로틀\"><a href=\"#%EC%93%B0%EB%A1%9C%ED%8B%80\" aria-label=\"쓰로틀 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰로틀</h3>\n<p>쓰로틀은 이벤트를 일정한 주기마다 발생하도록 하는것 쓰로틀에 설정시간으로 1s를 주면 해당 이벤트는 1s동안은 한번만 실행된다.<br>\n쓰로틀을 적용해보기로하고 쓰로틀 함수를 정의해줬다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>쓰로틀 이라는 함수에서 인자로 함수와 딜레이시간을 받는다. 그리고 타이머 변수를 하나 선언하고 쓰로틀 함수는 함수를 리턴하는데 그 함수는 타이머를 !timer 조건이 맞을 때 타이머를 setTimeout으로 함수를 넣어주고 그 함수 내부에서 timer = null이며 쓰로틀함수에서 인자로 받은 함수를 apply로 호출하고 셋타임아웃의 딜레이시간은 쓰로틀 함수에서 인자로 받은 시간이다. apply호출 같은경우 this를 공부할때 this를 어떻게 적용시킬지 호출단계에서 정해주는 느낌으로 받아들였는데 완전히 이해하지 않았다. 이렇게 쓰로틀 함수를 뺴놓고 사용할곳에서 import 해주고 사용한다</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> throttle <span class=\"token keyword\">from</span> <span class=\"token string\">'../throttle'</span>\n\n<span class=\"token keyword\">const</span> scrollEvent <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>scrollEvent<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 스크롤 이벤트를 scrollEvent라는 함수를 걸어주고 그 함수는 1초마다 한번 실행</span></code></pre></div>\n<p>이렇게 하면 콘솔을 찍어도 전처럼 마구마구 찍히지 않는것을 확인할 수 있다.</p>\n<h2 id=\"웹팩-빌드-시-dist폴더에서-디렉토리-적용\"><a href=\"#%EC%9B%B9%ED%8C%A9-%EB%B9%8C%EB%93%9C-%EC%8B%9C-dist%ED%8F%B4%EB%8D%94%EC%97%90%EC%84%9C-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%A0%81%EC%9A%A9\" aria-label=\"웹팩 빌드 시 dist폴더에서 디렉토리 적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹팩 빌드 시 dist폴더에서 디렉토리 적용</h2>\n<p>웹팩 빌드를 할 때 dist폴더에 js파일과 css파일을 빌드하는데 js파일은 js디렉토리에 들어간다음 그안에서 빌드가 되었는데 css파일은 바로 dist폴더에서 빌드가 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- dist\n-- a.css\n-- b.css\n-- js\n--- a.js\n--- b. js</code></pre></div>\n<p>기존의 세팅</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\nloader<span class=\"token punctuation\">:</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\noptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    publickPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/app/dist/css/'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span> 나머지 css로더들\n\nplugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\nfilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].css'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일단 셋팅에서 엔트리포인트가 한개가 아닌 두개여서 헷갈리는 부분이 많았고 아웃풋 셋팅에서 js파일들은 잘 js디렉토리를 바라보고 있길래 잘 들어갈줄알았지만 그러지 않았다. 그러다가 아웃풋에서 js 파일들을 어떻게 뱉는지 보았더니</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\nfilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'js/[name].bundle.js'</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>파일네임 앞에 js/ 가 있고 그리고 js디렉토리 안에 빌드가 되었다 혹시나 MiniCssExtractPlugin에서도 적용을 시키면 잘될까 확인을 해보았다.<br>\n세팅 후</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\nloader: MiniCssExtractPlugin.loader,\noptions: {\n    publickPath: &#39;/app/dist/css/&#39;\n}\n... 나머지 css로더들\n\nplugins: [\nnew MiniCssExtractPlugin({\nfilename: &#39;css/[name].css&#39;\n})\n]</code></pre></div>\n<p>그러니 이제 css파일들이 dist/css/a.css 이렇게 css디렉토리에 들어간것을 확인할 수 있었다,</p>\n<h2 id=\"모바일-기기로-접속-시-스크롤-튕김-현상\"><a href=\"#%EB%AA%A8%EB%B0%94%EC%9D%BC-%EA%B8%B0%EA%B8%B0%EB%A1%9C-%EC%A0%91%EC%86%8D-%EC%8B%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%ED%8A%95%EA%B9%80-%ED%98%84%EC%83%81\" aria-label=\"모바일 기기로 접속 시 스크롤 튕김 현상 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모바일 기기로 접속 시 스크롤 튕김 현상</h2>\n<p>모바일뷰를 작업할떄애는 보통 크롬에서 개발자도구를 켜고 작업을 한다. 그래서 아무런 문제가 없음을 확인하며 작업을 진행했었는데 실제 모바일 디바이스로 체크를 해보니 스크롤할때마다 중간중간에 잠긴것처럼 튕기고 스크롤이 안될때가 있었다. 그래서 처음에는 스크롤이벤트에 걸려있는 내용이 문젠줄 알았었는데 이벤트 내용을 살펴보아도 원인을 찾기 어려웠다. 그러던중 맥과 아이폰을 연결하고 모바일사파리 화면에서 보고있을떄 맥사파리에서 개발자도구로 요소검사를 할 수 있다는 것을 알게되어서 그렇게 체크를 해보았다. 그래서 이 요소 저 요소 만지고있었는데 최상단 div에</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow-x</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 걸려있던것을 지웠더니 정상적으로 작동되는것을 확인하였다. 사파리 연동 요소검사를 잘 활용해야겠다.</p>\n<h2 id=\"스크롤탑-smooth가-안먹던-현상\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A1%A4%ED%83%91-smooth%EA%B0%80-%EC%95%88%EB%A8%B9%EB%8D%98-%ED%98%84%EC%83%81\" aria-label=\"스크롤탑 smooth가 안먹던 현상 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크롤탑 smooth가 안먹던 현상</h2>\n<p>버튼 클릭시 스크롤을 최상단으로 올려주는 이벤트가 있었는데 자바스크립트 scrollTo()함수를 사용하여 옵션으로 smooth를 주고 서서히 올라가게 기능을 짰다. 이 역시 크롬에서 개발자도구로 확인할떄 아무 문제없이 잘 되었었는데, ios기기에서 버튼을 클릭했을 때, smooth없이 그냥 다이렉트로 한번에 화면전환이 되었다.<br>\n안드로이드기기에서 체크해보니 또 안드로이드에서는 잘 작동하였다. 어찌 ios에서도 적용할지 고민해보다가 react-scroll 라이브러리를 써서 윈도우 이벤트가아닌 라이브러리로 이벤트를 구현해보았고, 라이브러리의 애니메이션을 활용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> animationScroll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-scroll'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">scrollTop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  animation<span class=\"token punctuation\">.</span><span class=\"token function\">scrollToTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그랬더니 적용 후 아이폰에서도 smooth 애니메이션이 잘 적용되었다.</p>\n<h2 id=\"in-문법\"><a href=\"#in-%EB%AC%B8%EB%B2%95\" aria-label=\"in 문법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in 문법</h2>\n<p>이번에 새로 알게된 자바스크립트의 신기한 문법중 하나가 in 문법이다. 배열안에 요소가 존재하는지 boolean값으로 반환하는 것인데 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">item <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 아이템이 arr에 있다면 true 없다면 false</span></code></pre></div>\n<p>적용 한다면 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>유용하게 사용할 수 있는 것 같아서 기억해두고 필요 시 사용해야겠다.</p>\n<h2 id=\"공통로직-함수-처리\"><a href=\"#%EA%B3%B5%ED%86%B5%EB%A1%9C%EC%A7%81-%ED%95%A8%EC%88%98-%EC%B2%98%EB%A6%AC\" aria-label=\"공통로직 함수 처리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공통로직 함수 처리</h2>\n<p>로딩 처리 관련해서 ptr과 연동하면서 공통 로직이 생겼는데, 페이지가 첫 마운트시 api요청을 하게되면 로딩상태를 true로 바꾸고, api요청이 끝나면 false로 바꾸어 첫마운트시 로딩 컴포넌트를 렌더링하고 그 후 타 컴포넌트를 렌더링 했다. 그리고 ptr기능을 적용하며 ptr시 api요청을 해야하는데 그 떈 로딩상태를 핸들링 할 필요가 없었는데 로딩상태만 다를 뿐 요청 로직은 같은데 처음엔 함수 2개를 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token function-variable function\">onRefresh</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>따로 빼서 정의를 하려 했는데 처음에는 같은 로직을 다른 상황에 어떻게 적용할지 난해했는데 조금 고민을해보니 자주 사용하던 방법이고, 간단한 문제였다 함수에 매개변수를 넘겨주어 refresh함수인지 마운트 함수인지 구분을 줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setList</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRefresh</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setList</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>더 효율적인 방법은 차차 고민해봐야겠다.</p>\n<h2 id=\"pull-to-refresh\"><a href=\"#pull-to-refresh\" aria-label=\"pull to refresh permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pull to refresh</h2>\n<p>보통 어플리케이션의 최상단에서 위로 쭉 드래그를 하면 새로고침이 되면서 데이터를 새로 불러오는 기능들이 있다.\n예를들어 유튜브나 인스타그램을보면 최상단에서 위로 드래그 시 피드들이 새로 업데이트가 되고 내용이 바뀐다.\n처음에는 단순히 스크롤포지션이 0이하로 떨어질때 이벤트를 걸어주면 된다고 생각했는데 아무 기능 없을떄 위로 스크롤이 안되었고 난해했다. 그래서 몇가지 라이브러리를 알아보던 중 react-simple-pull-to-refresh라는 라이브러리가 있어서 적용을 해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> PullToRefresh <span class=\"token keyword\">from</span> <span class=\"token string\">'react-simple-pull-to-refresh'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">app</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PullToRefresh</span></span>\n      <span class=\"token attr-name\">onRefresh</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onRefresh<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">refreshingContent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>jsx element<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">maxPullDownDistance</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PullToRefresh</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>PullToRefresh컴포넌트 아래 칠드런으로 요소들이 들어가면 최상단에서 그 요소들이 드래깅 되었을때 특정 함수를 실행 시킬 수 있으며 그때 UI를 처리할 수 있다.\nonRefresh속성 같은 경우에는 드래깅 시 처리되는 함수이다. refreshingContent는 드래깅시 보여줄 jsx요소이다.\nmaxPullDistance는 얼만큼 드래깅이 될지 상한치를 정해주는 속성이다.\n더 다양한 속성들은<br>\n<a href=\"https://www.npmjs.com/package/react-simple-pull-to-refresh\">https://www.npmjs.com/package/react-simple-pull-to-refresh</a></p>\n<h2 id=\"로딩-컴포넌트-처리-시-마운트-두번-되는-에러\"><a href=\"#%EB%A1%9C%EB%94%A9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%8B%9C-%EB%A7%88%EC%9A%B4%ED%8A%B8-%EB%91%90%EB%B2%88-%EB%90%98%EB%8A%94-%EC%97%90%EB%9F%AC\" aria-label=\"로딩 컴포넌트 처리 시 마운트 두번 되는 에러 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로딩 컴포넌트 처리 시 마운트 두번 되는 에러</h2>\n<p>위에서 정리한 로딩 관련한 문제였는데 메인 컴포넌트 밑 자식 컴포넌트에서 상태값 관리를 하는데 갑자기 언마운트 된 요소에서 상태값을 변경하려고 한다는 에러를 뱉어서 확인해보았다. 그랬더니 자식 컴포넌트에서 마운트 시 콘솔을 찍어보니 2번이 찍혔다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">자식 마운트\n부모 마운트\n자식 마운트</code></pre></div>\n<p>부모의 구조는 다음과 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoadnig</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span> api 요청\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>로딩요소<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>자식 컴포넌트<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>처음에 원인을 찾지 못해서 답답했다. 그냥 조건부렌더링을 지우면 1번만 마운트되고 삼항연산자를 넣으면 2번을 했는데 생각해보니 굉장히 단순한 문제였다 첫 로딩값이 false이기에 처음 마운트 후 호출되는 유즈이펙트 전에 이미 로딩 상태값이 false인 상태로 자식이 마운트가 된다. 그리고 유즈이펙트에서 상태값 변경 후 언마운트 되었다가 다시 마운트가 되기에 총 2번이 되었던것. 일단 해결책은 첫 로딩값이 true이면 한번만 마운트된다.\n로딩 자체를 false로 관리하고 껐다켰다 하려면 조건을 하나 더 추가해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  cpnst <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoadnig</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>api요청\n    <span class=\"token function\">setList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> 로딩요소\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">return</span> 자식 요소들\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와같이 조건을 하나 더 걸어주고 해결할 수 있다.</p>\n<h2 id=\"트랜스폼-과-fixed\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8F%BC-%EA%B3%BC-fixed\" aria-label=\"트랜스폼 과 fixed permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜스폼 과 fixed</h2>\n<p>이번에 ptr을 처리하면서 알게된 사실이다. 적용했던 ptr라이브러리가 자식 요소들이 transform으로 드래깅 시 위치가 조정되는 원리였다. 그래서 position:fixed 인 요소가 있었는데 fix가 되지 않았다. 알아보니 트랜스폼과 fixed가 함꼐사용되면 픽스가 되지않는다고 한다. 그래서 처음에는 당황했지만 ptr요소에서 position:fixed 속성을 가진 요소를 제거하고 밖으로 빼냈다.</p>\n<h2 id=\"last-child-처리\"><a href=\"#last-child-%EC%B2%98%EB%A6%AC\" aria-label=\"last child 처리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>last child 처리</h2>\n<p>last child 처리관련 새로 알게된 사실. 한 컴포넌트에 이미지 요소들이 있을때 다 공통적으로 마진을 주는데 마지막 요소에 넣지않고 싶을때가 있다. 그래서 처음에는 자바스크립트와 연동해서 map함수로 요소들을 배치하는데 index값이 마지막이거나 요소가 마지막요소일떄 다른 클래스값을 부여하는 방법을 했다. 그런데 생각해보니 그때마다 이 방법을 적용하면 비효율적이라 생각했고 분명 css에서 처리할 방법이 있다고 생각했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li:not(:last-child)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 not선택자에last-child를 넣어주면 li 요소중 마지막 차일드 요소를 제외하고 마진이 10애 들어가게 된다.\n꼭 last-child가 아니라 first-child도 가능하다 이것을 알게되고 기본이 굉장히 부족하다고 느꼈다 css에 분명히 소흘했는데 앞으로 컴포넌트 작성할때 이러한 방법들을 더 알아보며 기본기를 탄탄히 쌓아야겠다.</p>\n<h2 id=\"이미지-넓이-높이-같은-값\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%84%93%EC%9D%B4-%EB%86%92%EC%9D%B4-%EA%B0%99%EC%9D%80-%EA%B0%92\" aria-label=\"이미지 넓이 높이 같은 값 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 넓이 높이 같은 값</h2>\n<p>레이아웃 작업을 하던 중 화면 너비에따라 이미지 요소들의 크기가 정해지고 높이도 그 너비에 맞게 같은 값을 주고싶었는데 그게 잘 안되었다. 정사각형 카드를 만들기 위해서 이것저것 시도를 해보았지만 어려움이 있었다. 그러다가 찾게된 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.list</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% - px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> top<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.card</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>각각의 요소들에 list클래스에서 정의한 너비가 들어가고 높이도 같은값을 가지게 하기 위함이었는데 저렇게 선택자 after속성을 주고 다음과 같은 내용을 정의하니 너비와 높이가 같은값이 맞춰졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>html구조는 위와 같다.</p>\n<h2 id=\"ts-ignore\"><a href=\"#ts-ignore\" aria-label=\"ts ignore permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ts-ignore</h2>\n<p>ts-ignore 관련해서 가끔 프로젝트 작업을 하다보면 eslint-ignore를 적용할 때가 있었는데 ts에서 ts-ignore도 적용할 일이 있었다</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>el<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 태그에 속성으로 데이터를 넣어줄일이 있었는데 자꾸 ts에서 없는 속성값을 할당할 수 없다고 에러를 뱉었다 그러다가 eslint처럼 ts도 이그노어를 적용할 수 있겠다 싶어서 찾아보게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{/*\n  // @ts-ignore */}</code></pre></div>\n<p>이렇게 무시해야할 코드 위에 위와같은 코드를 작성하게 되면 에러를 뱉지 않는다 들여쓰기는 맞춰서 작성해야한다. 한줄로 작성하게되면 적용이 되지 않는다. 따라서 위와같이 ts-ignore를 적용할 수 있다.</p>\n<h2 id=\"ripple-이벤트\"><a href=\"#ripple-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"ripple 이벤트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ripple 이벤트</h2>\n<p>material-ui나 여타 스타일 프레임워크를 보면 클릭할때 물결이 나오면서 애니메이션이 적용되는 것들이 있다. 알아보니 이런 애니메이션을 ripple이라고 하더라. 처음에는 어떤식으로 작동하는지 알아보았다.\nripple의 원리는 클릭이 발생하면 해당 클릭한부분을 rect()로 감지해서 알고 요소 하나를 생성해서 absolute로 포지션속성을 잡고 감지한 지점으로 top과 left값을 준다 그리고 퍼져나가게끔 애니메이션을 적용한뒤 overflow hidden으로 흘러넘치는것을 잡는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ripple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ripple <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      rect <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span>ripple<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'animate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>ripple<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>left<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>ripple<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>ripple<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        a<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>color <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      ripple<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--material-scale'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      a<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ripple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ripple<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>ripple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 적용을 해주더라.\n위와같은 애니메이션을 편하게 적용할 수 있게 react-ripples라는 라이브러리가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install react-ripples</code></pre></div>\n<p>적용예제</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> Ripples <span class=\"token keyword\">from</span> <span class=\"token string\">'react-ripples'</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rippleExample</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Ripples</span></span> <span class=\"token attr-name\">during</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>red<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Ripples</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  )\n}</span></code></pre></div>\n<p>위처럼 props로 during값과 color값을 전달할 수 있는데 during은 물결이 퍼지는 시간이고 color는 색상이다. 위처럼 편하게 적용할 수 있다.\n<a href=\"https://www.npmjs.com/package/react-ripples\">https://www.npmjs.com/package/react-ripples</a></p>\n<h2 id=\"이미지-스프라이트-제너레이터\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%8A%A4%ED%94%84%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"이미지 스프라이트 제너레이터 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 스프라이트 제너레이터</h2>\n<p>이미지 작업중 스프라이트를 적용하려고 알아보게되었다. 처음에는 이미지스프라이트 이미지들이 디자이너분들이 작업해서 하나의 이미지로 넘겨주는줄 알았는데 편하게 내가 만들 수 있었다.</p>\n<p><a href=\"https://spritegen.website-performance.org/\">https://spritegen.website-performance.org/</a><br>\n위의 사이트에서 이미지들을 설정해서 넣어주면 합쳐진 하나의 이미지로 만들어주는데, 뿐만 아니라 사진별 마진이 얼맞지 각각의 포지션이 어떻게 되는지 하나하나 알려주고 위치 조정도 할 수 있어 편하게 사용할 수 있다.\n이미지 스프라이트를 하게되면 불러오는 이미지자체가 여러개가 아니라 한개이기때문에 더 효율적인 이미지 작업을 할 수 있다고 생각하는데 앞으로 유용하게 사용할 수 있을것같다.</p>\n<h2 id=\"reactmemo의-얕은비교\"><a href=\"#reactmemo%EC%9D%98-%EC%96%95%EC%9D%80%EB%B9%84%EA%B5%90\" aria-label=\"reactmemo의 얕은비교 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.memo의 얕은비교</h2>\n<p>React.memo 관련해서 한번 내용을 정리한적이 있는데, memo는 함수형 컴포넌트에서 렌더링을 최적화하는 목적으로 사용하는데 리액트에서 컴포넌트가 리렌더링 되는 이유는 4가지가 있다.</p>\n<ol>\n<li>상태값이 바뀔때</li>\n<li>받은 props 가 바뀔때</li>\n<li>부모컴포넌트가 리렌더링 될때</li>\n<li>forceUpdate로 강제업데이트 할때</li>\n</ol>\n<p>인데, class형 컴포넌트 에서는 purecomponent 함수형컴포넌트에서는 memo를 적용해주면 받은 props가 바뀔때만 컴포넌트가 재랜더링 되며 그 props비교는 성능향상에 목적을 두고 얕은비교를 한다.\n리액트에서 불변성을 지켜야하는 중요한 이유이기도 하다. 근데 메모가 적용이 되지 않는 이슈가 발생하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/learned_5-05/","tagSlugs":["/tag/learn/"]},"frontmatter":{"date":"2020-05-05T12:10:32.169Z","description":"배움 정리 하기","tags":["learn"],"title":"배움 정리하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/learned_5-05/"}}}