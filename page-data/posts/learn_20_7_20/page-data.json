{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/learn_20_7_20/","result":{"data":{"markdownRemark":{"id":"bba823ad-f451-53ce-b8f5-3051ff38c74d","html":"<h2 id=\"이미지-로딩-실패시-\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A1%9C%EB%94%A9-%EC%8B%A4%ED%8C%A8%EC%8B%9C-\" aria-label=\"이미지 로딩 실패시  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 로딩 실패시 ??</h2>\n<p>개발하다보면 이미지에 데이터를 불러와서 바인딩 해줄때, 데이터가 잘못되었거나 변경되었을 경우에는 이미지가 로드되지 않거나, alt속성에 따라 엑박 이미지가 나오게 된다. 그렇게되면 UI를 해칠 우려가 있다.</p>\n<h3 id=\"img-tag-onerror\"><a href=\"#img-tag-onerror\" aria-label=\"img tag onerror permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>img tag onerror</h3>\n<p>이미지 태그에는 onerror라는 속성이 있다. src에 해당하는 속성으로 이미지를 불러오고, 문제가 생기면 onerror에 이미지로 대체한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> 'react\n<span class=\"token keyword\">import</span> errImg <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span>\n<span class=\"token keyword\">import</span> replaceImg <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ImgReplace</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>errImg<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onError</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>replaceImg<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 적용해 주었을 경우에는 errImg를 불러오는데 실패하면 replaceImg로 대체하여 로드한다.</p>\n<h3 id=\"background-img\"><a href=\"#background-img\" aria-label=\"background img permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>background Img</h3>\n<p>위의 경우에는 이미지 태그에서 적용이 가능하나 백그라운드 이미지로 적용할 경우 적용이 안된다. 그러나 백그라운드 이미지에서도 간단한 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> 'react\n<span class=\"token keyword\">import</span> errImg <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span>\n<span class=\"token keyword\">import</span> replaceImg <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ImgReplace</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n<span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\nbackgroundImg<span class=\"token punctuation\">:</span> <span class=\"token string\">'url(errImg), url(replaceImg)'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>background-img 속성에 url(이미지)를 2개를 넣어준다 먼저 앞에 이미지를 불러오고 실패 했을때 뒤에있는 이미지를 불러온다. 이렇게 이미지 로드시 실패에 관한 상황에 대처할 수 있다.</p>\n<h2 id=\"웹폰트-관련내용\"><a href=\"#%EC%9B%B9%ED%8F%B0%ED%8A%B8-%EA%B4%80%EB%A0%A8%EB%82%B4%EC%9A%A9\" aria-label=\"웹폰트 관련내용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹폰트 관련내용</h2>\n<p>웹폰트는 글라프로 구성된 모음이며, 각 글라프는 문자나 기호를 설명하는 벡터 모양이다. 그 결과, 두 가지 단순한 변수가 특정 글꼴 파일의 크기를 결정하며 Open Sans라는 인기있는 웹폰트에는 라틴어 그리스어 및 키릴어 문자를 포함하는 897개의 글라프가 들어있다.</p>\n<h3 id=\"폰트\"><a href=\"#%ED%8F%B0%ED%8A%B8\" aria-label=\"폰트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폰트</h3>\n<ul>\n<li>web safe font- 일반적으로 시스템에 설치된 폰트이며 다운로드 없이 사용자에게 의도대로 표현이 가능하다.(Arial, Helvetica)</li>\n<li>web font - 설치되어 있지 않아서 브라우저에서 다운로드 해야하는 폰트</li>\n</ul>\n<h3 id=\"왜-웹폰트가-나온걸까\"><a href=\"#%EC%99%9C-%EC%9B%B9%ED%8F%B0%ED%8A%B8%EA%B0%80-%EB%82%98%EC%98%A8%EA%B1%B8%EA%B9%8C\" aria-label=\"왜 웹폰트가 나온걸까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 웹폰트가 나온걸까?</h3>\n<ul>\n<li>시스템에 폰트가 없다면 폰트를 보여줄 수 없다.</li>\n<li>디자이너의 의도대로 표현이 안된다.</li>\n<li>가독성</li>\n<li>한국어는 특히, web safe font로 한계가 있다.</li>\n</ul>\n<h3 id=\"웹폰트의-형식\"><a href=\"#%EC%9B%B9%ED%8F%B0%ED%8A%B8%EC%9D%98-%ED%98%95%EC%8B%9D\" aria-label=\"웹폰트의 형식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹폰트의 형식</h3>\n<p>오늘날 웹에서는 네 가지 글꼴 컨테이너 형식인 EOT,TTF,WOFF,WOFF2가 사용된다. 여러 옵션이 있지만, 이전\n브라우저와 최신 브라우저 모두에서 작동하는 단일 범용 형식은 없다. EOT는 IE 전용이고, TTF는 부분적인 IE\n지원 기능이 포함되어있고, WOFF는 지원 범위가 가장 넓지만 몇명 이전 브라우저에서는 사용할 수 없다.\nWOFF2.0지원은 많은 브라우저에서 현재 진행중이다.</p>\n<ul>\n<li>EOT: IE8 이하일 경우</li>\n<li>TTF: 구형 안드로이드버전(4.4)에서 필요.</li>\n<li>WOFF: 대부분의 모던 브라우저에서 지원</li>\n<li>WOFF2: WOFF보다 압축률이 30%정도 더 좋음</li>\n</ul>\n<h3 id=\"웹폰트의-문제점\"><a href=\"#%EC%9B%B9%ED%8F%B0%ED%8A%B8%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"웹폰트의 문제점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹폰트의 문제점?</h3>\n<p>단순하게 다운로드 시간만큼 렌더링이 느려진다. 특히 한글 폰트는 상대적으로 용량이 크다. 이점이 여려 문제를 야기한다.</p>\n<h3 id=\"적용\"><a href=\"#%EC%A0%81%EC%9A%A9\" aria-label=\"적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용</h3>\n<ul>\n<li>font-family 속성으로 폰트를 적용한다.</li>\n<li>font-family에 명시된 글꼴이 설치가 되어있지 않다면 기본 글꼴을 보여준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Nanim Gothic'</span><span class=\"token punctuation\">,</span> sans-serif\"<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"font-face\"><a href=\"#font-face\" aria-label=\"font face permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@font-face</h3>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Nanum Gothic'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> normal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>/font/NanumGothic.eot<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>....woff2<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>....woff<span class=\"token punctuation\">)</span></span>\n      <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>....ttf<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'truetype'</span><span class=\"token punctuation\">)</span> ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"확장자를-적용할-때-순서\"><a href=\"#%ED%99%95%EC%9E%A5%EC%9E%90%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%A0-%EB%95%8C-%EC%88%9C%EC%84%9C\" aria-label=\"확장자를 적용할 때 순서 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장자를 적용할 때 순서</h3>\n<ol>\n<li>woff2를 가장 앞에 써준다. 브라우저는 선언된 순서대로 지원 가능한 파일 형식을 다운받기에 압축률이 가장 좋은 woff2를 먼저 선언한다.</li>\n<li>format()은 반드시 써준다. 쓰지 않으면 브라우저는 지원 가능한 파일 형식이 나올 때 까지 순서대로 받음</li>\n</ol>\n<h3 id=\"적용-시-local-속성-세팅\"><a href=\"#%EC%A0%81%EC%9A%A9-%EC%8B%9C-local-%EC%86%8D%EC%84%B1-%EC%84%B8%ED%8C%85\" aria-label=\"적용 시 local 속성 세팅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 시 local 속성 세팅</h3>\n<p>local 없이 선언하게 되면 폰트 존재 유무와 관계없이 무조건 다운받게된다. 따라서 불필요한 리소스를 요청하게\n된다.\nlocal 문법을 선언해주면 시스템에설치 되어 있다면 리소스를 요청하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nanum-Gothic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>/font/NanumGothic.eot<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>....woff2<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>....woff<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>....ttf<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'truetype'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"subset\"><a href=\"#subset\" aria-label=\"subset permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>subset</h3>\n<p>@font-face를 적용할때 unicode-range속성을 사용해서 지원가능한 unicode범위를 정해놓고 해당 속성에\n일치하는 글자를 렌더링할 때 다운받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span>\n  ... <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span> U+x xxx-xxxx<span class=\"token punctuation\">,</span> u+x xxx-xxxx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다국어를 지원하는 사이트의 경우 유용하다.</p>\n<h3 id=\"foit과-fout\"><a href=\"#foit%EA%B3%BC-fout\" aria-label=\"foit과 fout permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FOIT과 FOUT</h3>\n<ul>\n<li>FOIT: Flash of Invisible Text\n웹폰트가 로드될 떄까지 텍스트를 렌더링 하지 않다가 로드가 된 이후에 텍스트를 보여주는 동작.<br>\n폰트가 로딩되지 않으면 웹페이지의 블락을 가져옴, 모던브라우저는 기다리는 제한 시간이 있다.<br>\nchrome,safari, firefox</li>\n<li>FOUT: Flash of Unstyled Tecxt\n웹폰트가 로드될떄까지 기본 폰트를 보여주고 이후 글꼴을 대체하는 방식.\n흔히 말하는 깜빡임이며 폰트에따라 자간, 높이에 따라 레이아웃이 변경될 수 있다.</li>\n</ul>\n<h3 id=\"왜\"><a href=\"#%EC%99%9C\" aria-label=\"왜 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜??</h3>\n<p>폰트를 받는 시점이 텍스트를 렌더링 하는 시점과 경합이 일어나기에 그렇다. 두 가지 문제를 최소화 하는게 중요 FOIT을 방지하고 FOUT를 최소화 하는 방법으로!</p>\n<h3 id=\"font-display\"><a href=\"#font-display\" aria-label=\"font display permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>font-display</h3>\n<p>@font-face에서 font-display라는 속성이 있다. 값들은 다음과 같다.</p>\n<ul>\n<li>auto: 브라우저의 기본동작에 맡기는 방식</li>\n<li>block: 짧은 차단 기간과 무한 스왑 기간을 부여한다. 글꼴이 로드되지 않으면 브라우저가 처음에 보이지 않는 텍스트를 그리지만, 로드되는 즉시 글꼴로 스왑한다.</li>\n<li>swap: 글꼴에 0초의 차단 기간과 무한 스왑 기간을 부여한다. 응답이 올 떄까지 기다리고 그전까지 기본 폰트를 보여줌</li>\n<li>fallback: 100ms 내외의 시간 동안만 블락하고 기본폰트를 보여준다. 응답이 오면 해당 폰트로 스왑하나 3s만 기다림.</li>\n<li>optional: 100ms 내외의 시간동안만 블락하고 기본폰트를 보여줌 그 후 대체하지 않는다.</li>\n</ul>\n<h3 id=\"자바스크립트를-활용한-예\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%98%88\" aria-label=\"자바스크립트를 활용한 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트를 활용한 예</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fontLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> font <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'url(font.woff)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> font<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  document<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>font<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fonts-loaded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예처럼 className을 핸들링 할 수 도 있겠고, 다른 방법을 사용할 수 도 있겠다. 폰트 로딩 체크가 가능하다는점.</p>\n<h3 id=\"preload\"><a href=\"#preload\" aria-label=\"preload permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>preload</h3>\n<p>html 의 head 부분에 link 태그를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./fonts/...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>preload를 이용해서 폰트를 받으면 리소스를 다른것보다 먼저 요청한다. 요소들이 그려지기 전에 로드를 하고 FOUT과 FOIT이 없어지는 대신, 그만큼 렌더링이 느려진다. 사용여부와 관계없이 무조간 리소스를 받는다.<br>\n내가 preload를 이번에 적용하려고 할때 잘 적용이 되지 않았다. 원인은 아직 찾지 못했고 더 학습해야할 부분이다.<br>\n대부분의 경우에 preload와 font-display를 활용해서 대처가 가능하고 좀더 세부적인 컨트롤이 필요할 때 JS를 사용해서 적용해주면 될 것 같다.</p>\n<p>Noto Sans 관련 <a href=\"https://m.blog.naver.com/PostView.nhn?blogId=flyteen85&#x26;logNo=221330192231&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F\">https://m.blog.naver.com/PostView.nhn?blogId=flyteen85&#x26;logNo=221330192231&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F</a></p>\n<h2 id=\"webpack-dotenv\"><a href=\"#webpack-dotenv\" aria-label=\"webpack dotenv permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack dotenv</h2>\n<p>환경변수를 관리할때 프로젝트의 루트 디렉토리에 .env 파일에 환경변수들을 관리하고 사용을 하며 그 내용을\n간략하게 한번 정리했다. 신규 프로젝트를 생성해서 process.env에 접근을 했더니 접근이 되지 않았다.\n해당 내용을 알아보니 webpack 세팅을 별도로 해주어야 했다. dotenv-webpack을 먼저 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm i dotenv-webpack</code></pre></div>\n<p>그 후 webpack.config.js에서 셋팅을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Dotenv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv-webpack'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//.. 그 후 플러그인 추가</span>\nmodule<span class=\"token punctuation\">.</span>export <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\nplugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Dotenv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\npath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/.env'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ... 나머지 옵션들</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와같이 웹팩 적용 후 다시 process.env에 접근하면 환경변수에 접근이 가능한것을 확인할 수 있다.</p>\n<h2 id=\"object-fit-속성\"><a href=\"#object-fit-%EC%86%8D%EC%84%B1\" aria-label=\"object fit 속성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>object-fit 속성</h2>\n<p>object-fit 속성은 대체되는 요소의 내용(img, video, object, svg)등 이 지정된 너비와 높이에 맞게 장착되는 방식을 지정한다. 따라서 이미지나 고정된 크기의 썸네일을 출력하는 다양한 경우처럼 제각각의 크기를 가진 오브젝트등을 넘겨받아 비율을 유지한 채로 일정한 크기를 재 가공하는 경우 유용하다. background-size속성과 매우 유사함.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">object-fit</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>fill: 대체되는 요소의 내용이 지정된 너비와 높이에 따라 크기가 확대 혹은 축소된다. 요소를 가득 채울 수 있는 크기로 변화되면서 종횡비는 유지되지 않는다.</li>\n<li>contain: 내용이 종횡비를 유지하면서 요소에 정의된 너비와 높이 안에서 가능한 많이 확대시킨다.</li>\n<li>cover: 내용이 종횡비를 유지하면서 정의된 너비와 높이를 가득 채울때까지 확대된다.</li>\n<li>none: 요소의 크기와 상관없이 기본 알고리즘에 의해 조정된다. 이 알고리즘은 원본의 크기에 가운데 정렬된 형태를 띈다.</li>\n<li>scale-down: 내용의 크기를 아무것도 지정되지 않거나 혹은 contain이 지정되어 있는것처럼 변경한다.</li>\n</ul>\n<h2 id=\"object-position\"><a href=\"#object-position\" aria-label=\"object position permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>object-position</h2>\n<p>object-fit 속성은 기본적으로 요소의 가운데로 이미지를 이동시키는데, 이 위치를 원하는 값으로 변경하는것이 object-position속성.</p>\n<ul>\n<li>기본값은 50%, 50% 이다.</li>\n<li>숫자형 px, em, %등이 사용되며, 키워드 top,left right, bottom이 사용될 수 있다.<br>\n위와같은 속성을 사용하려면 background속성을 이용해야만 적용이 가능한줄 알았는데, 백그라운드 속성을 사용하지 않아도 일반 이미지태그에서도 백그라운드 포지션과 사이즈 속성이 적용이 가능하더라. 모르는게\n정말 많기에 잘 학습해야겠다.</li>\n</ul>\n<h2 id=\"옵저버-관찰-등록-후-관찰-끊기\"><a href=\"#%EC%98%B5%EC%A0%80%EB%B2%84-%EA%B4%80%EC%B0%B0-%EB%93%B1%EB%A1%9D-%ED%9B%84-%EA%B4%80%EC%B0%B0-%EB%81%8A%EA%B8%B0\" aria-label=\"옵저버 관찰 등록 후 관찰 끊기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵저버 관찰 등록 후 관찰 끊기.</h2>\n<p>특정 페이지가 마운트되고 요소관찰을 시작하는데, 요소들이 특정 조건에 따라 변경이 된 후, 옵저버를 다시 등록\n하는데 옵저버가 2번이 등록이 되서, 난감했다. 그래서 옵저버의 콜백또한 2번이 실행되는 문제가 생겼다. DOM요소\n안의 내용물은 바뀌지만, DOM자체는 그대로였기에, 2번 등록되는듯 했다. 그래서 처음에 든 생각은\n언마운트 할 때 연결을 끊는 unobserve를 사용해서 해당 요소들을 unobserve하려고 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unObserver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">refs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> observer<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">;</span>\n  observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>checkIntersect<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    threshold<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>unObserver 함수를 정의해서 export 해준 뒤</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//관찰 등록</span>\n  <span class=\"token function\">registerObserver</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 뒷정리에서 관찰 끊기</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unObserver</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>뒷정리에서 해당 unobserver함수를 실행시켰다. 함수는 정상적으로 작동했으나 관찰이 끊기지 않았다. 해당\n원인은 intersectionObserver 생성자에 있었다. 기존 생성자는 함수에서 생성을 했었는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">registerObserver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">refs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> observer<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">;</span>\nobserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>checkIntersect<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  threshold<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같았다. 함수가 실행될때마다 새로운 observer인스턴스를 생성해서 각각의 별개의 observer인스턴스를\n가진 것 이었다. 그래서 해당 파일에서 공통으로 사용되게끔 함수 밖으로 뺴주기로 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> observer<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">;</span>\nobserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>checkIntersect<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  threshold<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">registerObserver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">refs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unObserver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">refs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    refs<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 정상적으로 언마운트할때 관찰을 끊고 새로 등록될떄 잘 등록된다.</p>\n<h2 id=\"옵셔널-체이닝\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D\" aria-label=\"옵셔널 체이닝 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 체이닝</h2>\n<p>옵셔널체이닝은 새롭게 추가된 문법이다. null이나 undefined인 값이 반환되면,\n즉시 중단하고 undefined를 반환한다. 보통 null이나 undefined의 값에\n접근하여 함수를 실행시키면 오류가 발생하나, 오류 없이 undefined를 반환한다.\n추가된지 얼마 안 된 문법이기에 구형 브라우저는 폴리필이 필요하다.\n옵셔널 체이닝을 사용하면 프로퍼티가 없는 중첩 객체에도 에러 없이 안전하게 접근할 수 있다.</p>\n<h3 id=\"왜-옵셔널-체이닝이-필요할까\"><a href=\"#%EC%99%9C-%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\" aria-label=\"왜 옵셔널 체이닝이 필요할까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 옵셔널 체이닝이 필요할까?</h3>\n<p>예제를 보자. \u001c여러 유저가 있는데 주소 정보를 가지고 있지 않은 유저가 몇몇이 있다. user.address.street에 접근해야 하는 상황이라면 에러가 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소가 없다</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>요소가 페이지에 없는 경우에도 개발도중 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>기존 방식에서 이런 문제들을 해결하기위해 &#x26;&#x26; 연산자로 null체킹을 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined 에러발생안함</span></code></pre></div>\n<h3 id=\"옵셔널-체이닝-적용\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D-%EC%A0%81%EC%9A%A9\" aria-label=\"옵셔널 체이닝 적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 체이닝 적용</h3>\n<p>?. 문법은 ?. 앞의 평가 대상이 Undefined나 null이면 평가를 머추고 undefined를 반환한다. &#x26;&#x26; 연산으로 체크하던것을 옵셔널체이닝을 사용한다면\n이와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>address<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>user객체가 존재하지 않을떄</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>user객체가 null 이기에 address.street접근 자체도 에러가 발생해야하지만, 평가 대상인 user에서 이미 undefined를 반환하여 에러가 발생하지 않았다.\n?.은 문법이 위치해 있는 그자리에서만 동작하고 확장되지 않는다. 평가가 끝나고\n그 즉시 평가를 멈추고 반환한다. 딱봐도 &#x26;&#x26;를 사용하는것보다 개발도 편하고,\n가독성도 좋은것이 확인된다.</p>\n<h3 id=\"사용시-주의점\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"사용시 주의점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용시 주의점</h3>\n<ul>\n<li>옵셔널체이닝을 남용하면 안된다.\n?.는 존재하지 않아도 괜찮은 대상에만 사용해야한다. 사용자 주소관련 user는 반드시 있어야 하는 값이지만. address는 필수값이 아니다. 실수로 user에 값을 할당하지 않았다면 바로 알아낼 수 있도록 해야한다.</li>\n<li>?.앞의 변수는 꼭 선언되어 있어야 한다.\n변수 user가 선언되어있찌 않으면 user?.anything은 평가시 에러가난다.</li>\n</ul>\n<h3 id=\"단락-평가\"><a href=\"#%EB%8B%A8%EB%9D%BD-%ED%8F%89%EA%B0%80\" aria-label=\"단락 평가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단락 평가</h3>\n<p>?.은 왼쪽 평가대상에 값이 없으면 즉시 평가를 멈춘다. 따라서 ?. 오른쪽에 있는 함수 호출등의 부가 동작들은 평가가 멈추면 일어나지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아무일 없다.</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 값이 증가안함</span></code></pre></div>\n<h3 id=\"와-\"><a href=\"#%EC%99%80-\" aria-label=\"와  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>?.()와 ?.[]</h3>\n<p>?.은 연산자가 아니고 함수, 대괄호와 함꼐 동작하는 특별한 문법 구조체이다.\n?.()은 존재 여부가 확실하지 않은 함수를 호출할 떄 사용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">admin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'관리자에요'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nuser1<span class=\"token punctuation\">.</span>admin<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 관리자에요</span>\nuser2<span class=\"token punctuation\">.</span>admin<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 안함</span></code></pre></div>\n<p>위의 경우에는 user객체는 반드시 존재하기 떄문에 admin 프로퍼티엔 .만 사용해서 접근했다.\n그리고 admin의 존재여부만 확인했다.<br>\n.대신 []를 사용해 객체 프로퍼티에 접근하는 경우엔 ?.[]사용이 가능하다. 프로퍼티 존재 여부가 확실하지 않은 경우에도 안전하게 프로퍼티를 읽을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">'이름'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token string\">'firstName'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user1<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이름</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user2<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>?. 은 delete와도 함꼐 사용이 가능함.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> user<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// user가 존재하면 user.name 삭제</span></code></pre></div>\n<h3 id=\"은-읽기나-삭제에는-사용이-가능하나-쓰기에는-불가능\"><a href=\"#%EC%9D%80-%EC%9D%BD%EA%B8%B0%EB%82%98-%EC%82%AD%EC%A0%9C%EC%97%90%EB%8A%94-%EC%82%AC%EC%9A%A9%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%98%EB%82%98-%EC%93%B0%EA%B8%B0%EC%97%90%EB%8A%94-%EB%B6%88%EA%B0%80%EB%8A%A5\" aria-label=\"은 읽기나 삭제에는 사용이 가능하나 쓰기에는 불가능 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>?.은 읽기나 삭제에는 사용이 가능하나 쓰기에는 불가능!!</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">user<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'이름'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// syntaxError</span>\n<span class=\"token comment\">// 해당 이유는 undefined = '이름' 이기때문에</span></code></pre></div>\n<h2 id=\"input-spellcheck-속성\"><a href=\"#input-spellcheck-%EC%86%8D%EC%84%B1\" aria-label=\"input spellcheck 속성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>input spellCheck 속성</h2>\n<p>개발을 하다가 모바일 기기에서 접속했을때, input폼에 텍스트를 입력하면 문법 검사를하고, 문법이 틀리면 아래\n빨간 경고줄이 뜬다. 좋은 기능이지만, 불필요한 UI를 표현할때가 있어서 해당 기능을 끄고싶어서 방법을\n찾아보았다.<br>\ninput에 spellCheck라는 속성이 있는데, 해당 속성에 false값을 주면 입력필드에 맞춤법 검사를 비활성화 시킬 수\n있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n    <span class=\"token attr-name\">...</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">spellCheck</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"ios-기기-에서-safari-접속-관련-내용\"><a href=\"#ios-%EA%B8%B0%EA%B8%B0-%EC%97%90%EC%84%9C-safari-%EC%A0%91%EC%86%8D-%EA%B4%80%EB%A0%A8-%EB%82%B4%EC%9A%A9\" aria-label=\"ios 기기 에서 safari 접속 관련 내용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ios 기기 에서 safari 접속 관련 내용</h2>\n<h3 id=\"인풋의-상단-보더\"><a href=\"#%EC%9D%B8%ED%92%8B%EC%9D%98-%EC%83%81%EB%8B%A8-%EB%B3%B4%EB%8D%94\" aria-label=\"인풋의 상단 보더 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인풋의 상단 보더</h3>\n<p>ios 기기로 사파리에서 접속했을떄, input을 보면 상단 보더는 약간의 셰도우가 들어가있고 보더도 뭔가 다른 느낌이다.\n그래서 기존 레이아웃 의도와 달라질 수 있는데, 해당 부분을 처리하기위해서 쉐도우를 없애줘야 한다.\n간단하게 css 를 적용하면 지울 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.input</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 내용을 추가해주면 기존 웹과 동일한 UI를 나타낼 수 있다.</p>\n<h3 id=\"인풋-클릭시-줌인-되는-현상\"><a href=\"#%EC%9D%B8%ED%92%8B-%ED%81%B4%EB%A6%AD%EC%8B%9C-%EC%A4%8C%EC%9D%B8-%EB%90%98%EB%8A%94-%ED%98%84%EC%83%81\" aria-label=\"인풋 클릭시 줌인 되는 현상 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인풋 클릭시 줌인? 되는 현상</h3>\n<p>아마 기본적으로 사용자 편의성을 위해 인풋창을 클릭 했을때, zoom-in이 되는 것 같다. 다만 줌인이되면 위의 보더\n내용처럼 UI비율이 흐트러지게된다. 해당 현상을 방지하려면 처음에 css적용이 되어야할 것 같았는데, html 헤드에\n메타태그를 하나 추가해주면 처리가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span>\n    <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>minimum-scale=1, initial-scale=1, width=device-width,maximum-scale=1, user-scalable=0<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 내용 처럼 적용해주면 인풋을 클릭 하더라도 줌인이 되지 않는다.<br>\nios 사파리환경에서 기본적으로 위와같은 내용들이 많이 있는것같아 개발하며 체크를 잘 해야겠다.</p>\n<h2 id=\"모바일과-데스크탑-css-분리\"><a href=\"#%EB%AA%A8%EB%B0%94%EC%9D%BC%EA%B3%BC-%EB%8D%B0%EC%8A%A4%ED%81%AC%ED%83%91-css-%EB%B6%84%EB%A6%AC\" aria-label=\"모바일과 데스크탑 css 분리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모바일과 데스크탑 css 분리</h2>\n<p>보통 반응형 레이아웃을 구성할 때 media query를 사용하여 브라우저의 넓이등 기준에 따라 다른 css를 적용하여\n반응형 레이아웃을 구성한다. 하지만 html 요소 자체가 달라 질 수 있고, 오직 미디어쿼리만 사용하기에는 부족한\n부분이 있을 수 있다.</p>\n<h3 id=\"react-device-detect\"><a href=\"#react-device-detect\" aria-label=\"react device detect permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-device-detect</h3>\n<p>전에 한번 정리한 내용인데, 클라이언트측에서 모바일인지 아닌지 체크를 react-device-detect 라이브러리를\n사용하여 체크해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isMObileOnly <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-device-detect'</span>\n<span class=\"token operator\">...</span>\n\nisMobileOnly <span class=\"token comment\">// 모바일이면 true 데스크탑이면 false 반환</span></code></pre></div>\n<h3 id=\"불러오기\"><a href=\"#%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"불러오기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불러오기</h3>\n<p>isMobileOnly값에 따라서 스타일 파일을 나눠서 적용해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isMObileOnly <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-device-detect'</span>\n<span class=\"token keyword\">import</span> classnames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames/bind'</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> isMobileOnly <span class=\"token operator\">?</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>Mobile<span class=\"token punctuation\">.</span>scss<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>Desktop<span class=\"token punctuation\">.</span>scss<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">classnames</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"react-app-에서-ie-지원하기\"><a href=\"#react-app-%EC%97%90%EC%84%9C-ie-%EC%A7%80%EC%9B%90%ED%95%98%EA%B8%B0\" aria-label=\"react app 에서 ie 지원하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react app 에서 IE 지원하기</h2>\n<p>React는 기본적으로 ie9, ie11 같은 구형 브라우저를 지원하지 않는다. 하지만,\n방법은 있지만, 실행 속도등의 문제가 있을 수 있다.<br>\nreact-app-polyfill 과 babel을 활용하면 문제를 해결할 수 있다.</p>\n<h3 id=\"react-app-polyfill\"><a href=\"#react-app-polyfill\" aria-label=\"react app polyfill permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-app-polyfill</h3>\n<p>리액트 개발에서 사용하는 다양한 문법을 변환해주는 라이브러리이다.\n필요한것만 포함하고 있어 작고 가벼운게 특징이다.<br>\npromise,window.fetch,Symbol,Object.assign,Array.from 과 같은 것들을 변환 해준다.<br>\n설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i react-app-polyfill\nyarn add react-app-polyfill</code></pre></div>\n<p>공식 npm을 보면 인스톨을 한 다음에 반드시 src/index.js의 첫번째 줄에서 import\n해야한다고 나와있다.</p>\n<p>src/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'react-app-polyfill/ie11'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./styles/reset.scss'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ie9일 경우 동일하나 ie11에서 가져온것을 ie9로 바꿔준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'react-app-polyfill/ie9'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./styles/reset.scss'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"stable\"><a href=\"#stable\" aria-label=\"stable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stable</h3>\n<p>stable은 package.json의 browserslist 에 해당하는 브라우저에 대해 안정적인 코드를\n사용할 수 있게 해준다. 적용이 잘 안될떄는 node_modules/.cache를 삭제하고 다시 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'react-app-polyfill/ie11'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'react-app-polyfill/stable'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./styles/reset.scss'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"babelpolyfill\"><a href=\"#babelpolyfill\" aria-label=\"babelpolyfill permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@babel/polyfill</h3>\n<p>babel/polyfill은 react-app-polyfill 에 비해 사이즈가 크고, 필요없는 기능이\n많다고 한다. 이전에는 async,await가 react-app-polyfill에서 지원이 안되서\nbabel/polyfill을 사용해야 적용이 되는것 같았는데, 지금 확인해보면 react-app-polyfill도\n적용이 되는듯 하다. 다만 제너레이터 함수 같은것들을 위해 적용이 필요하다.<br>\n바벨 폴리필은 두 가지 패키지로 구성되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install core-js regenerator-runtime</code></pre></div>\n<p>설치 후 index.js 상단에 import 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'core-js/stable'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'regenerator-runtime/runtime'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'react-app-polyfill/ie9'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'react-app-polyfill/stable'</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/learn_20_7_20/","tagSlugs":["/tag/optional-chaining/"]},"frontmatter":{"date":"2020-06-25T12:10:32.169Z","description":"이미지 로딩 실패 처리, 웹폰트 관련, object-fit 속성, 옵저버 관찰 등록 후 끊기, 옵셔널 체이닝, input spellCheck 속성,ios 기기 safari 접속 관련, 모바일 데스크탑 스타일 분리, react-polyfill","tags":["optionalChaining"],"title":"learn learn learn"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/learn_20_7_20/"}}}