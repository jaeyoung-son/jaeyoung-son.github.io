{"componentChunkName":"component---src-templates-blog-post-js","path":"/migration/2020-04-28---learned_at_4-28/","result":{"data":{"site":{"siteMetadata":{"title":"재영 블로그","author":"jaeyoung-son","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"aaaa1186-b733-5ac5-920e-9c53a3823cf2","excerpt":"그날그날 배운것들을 기록하자. git flow, react spring, useState에 함수호출, DOM 언마운트시 애니메이션, css 이미지 크기, props전달 중 비구조할당, css 중간위치잡기, 타 url로 보내기, react-device-detect, 일정 박스안에 텍스트가 넘칠 때 처리, toLocaleString…","html":"<h2 id=\"그날그날-배운것들을-기록하자\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%82%A0%EA%B7%B8%EB%82%A0-%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4%EC%9D%84-%EA%B8%B0%EB%A1%9D%ED%95%98%EC%9E%90\" aria-label=\"그날그날 배운것들을 기록하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그날그날 배운것들을 기록하자.</h2>\n<p>git flow, react spring, useState에 함수호출, DOM 언마운트시 애니메이션, css 이미지 크기, props전달 중 비구조할당, css 중간위치잡기, 타 url로 보내기, react-device-detect, 일정 박스안에 텍스트가 넘칠 때 처리, toLocaleString</p>\n<p>하루하루 많은 문제들과 부딪히는데 어찌저찌 해결할때도 있고, 해결하지 못할때도 있다 앞으로도 많은 문제를 만날뿐 아니라 같은 문제들도 만날텐데 같은문제가 생길때 다시 또 헤메지 않기위해 배운것들을 기록하려고 한다.</p>\n<h3 id=\"git-flow\" style=\"position:relative;\"><a href=\"#git-flow\" aria-label=\"git flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git flow</h3>\n<p>깃플로우는 한번 정리를 했었는데 내용들은 어느정도 알았지만 어찌 사용해야할지 몰랐다. 직접 사용하게 되면서 사용법을 정리해보자.</p>\n<h4 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h4>\n<p>일단 git-flow 명령어를 사용하기 위해 homebrew를 사용하여 git-flow를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install git-flow</code></pre></div>\n<h4 id=\"초기설정\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95\" aria-label=\"초기설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기설정</h4>\n<p>flow init -d 명령어는 로컬 저장소에 develop 브랜치를 생성한 뒤 해당 브랜치로 이동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git flow init -d</code></pre></div>\n<h4 id=\"명령어\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git flow &lt;feature | release | hotfix&gt; &lt;start | finish&gt; &lt;branch_name&gt;</code></pre></div>\n<p>피쳐 릴리즈 핫픽스는 저번에 정리한 그 내용이다.</p>\n<h4 id=\"사용-예\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88\" aria-label=\"사용 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 예</h4>\n<p>start: 새로운 브랜치 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">기능 개발 시작\ngit flow feature start &lt;branch_name&gt;\n배포 시작\ngit flow release start &lt;branch_name&gt;\n수정 배포 시작\ngit flow hotfix start &lt;branch_name&gt;</code></pre></div>\n<p>finish: 브랜치 병합 후 해당 브랜치 삭제</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git flow feature finish &lt;branch_name&gt;\n...</code></pre></div>\n<h4 id=\"프로젝트-적용\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A0%81%EC%9A%A9\" aria-label=\"프로젝트 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 적용</h4>\n<p>최초 적용 개발자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone &lt;remote_url&gt;\ngit flow init -d\ngit pusj origin develop\ngit branch --set-upstream-to=origin/develop develop //타 방법</code></pre></div>\n<p>클론하는 개발자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone &lt;remote_url&gt;\ngit checkout -b develop origin/develop\ngit flow init -d</code></pre></div>\n<h4 id=\"플로우-사용\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%A1%9C%EC%9A%B0-%EC%82%AC%EC%9A%A9\" aria-label=\"플로우 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플로우 사용</h4>\n<p>특정기능 개발시</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git flow feature start &lt;branch_name&gt;\n개발 완료 후\ngit flow feature finish &lt;branch_name&gt;\n원격 저장소 반영\ngit push origin master develop</code></pre></div>\n<p>배포시기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git flow release start &lt;version_name&gt;\ngit flow release finish &lt;version_name&gt;\ngit push origin master\ngit push --tags</code></pre></div>\n<h3 id=\"react-spring\" style=\"position:relative;\"><a href=\"#react-spring\" aria-label=\"react spring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react spring</h3>\n<p>데이터를 받아서 숫자가 다이나믹하게 또로로로롱 올라가는 기능을 구현하려고 라이브러리를 찾아보다가 react spring이라는 라이브러리를 접하게 되었다. 숫자 카운팅 뿐 아니라 이것저것 동적인 웹을 만들기에 유용한 기능들이 많은 라이브러리였다. 일단 숫자카운팅 기능을 위해 공식문서를 보면서 읽고 적용을 시도해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSpring<span class=\"token punctuation\">,</span> animated <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-spring'</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">useSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> number<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> number<span class=\"token operator\">:</span><span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0에서 1까지 점차 올라감</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animated.span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>animated.span</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">// 에니메이티드로 감싼다</span></code></pre></div>\n<p>0에서 1까지 순차적으로 올라가는 기능인데 소수점까지 카운팅이 되서 원치 않는 기능이 생겼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animated.span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>animated.span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>공식문서를 다시 찾아보다가 .interpolate를 써서 자바스크립트의 toFixed를 사용해서 리턴을 해주니 소수점이 해결이 되었다 그러나 카운팅 수가 10만이면 100,000이 아니라 10000 나와서 예쁘지 않았다 그래서 고민을 해보다가 interpolate의 함수안에서 잘 가공하여 리턴해주면 될 것 같아서 시도를 해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animated.span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\B(?=(\\d{3})+(?!\\d))</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>animated.span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>소수점을 짤라서 반올림하고 그 반환값을 스트링화하고 정규식을 활용하여 replace를 해주었더니 원하던 형태로 나왔다.</p>\n<h3 id=\"타입스크립트에서-css파일-모듈-import-에러\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-css%ED%8C%8C%EC%9D%BC-%EB%AA%A8%EB%93%88-import-%EC%97%90%EB%9F%AC\" aria-label=\"타입스크립트에서 css파일 모듈 import 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트에서 css파일 모듈 import 에러</h3>\n<p>타입스크립트로 프로젝트를 진행하면서 난감한 문제들을 매일마다 만나고있다. 나를 크게 당황시켰던 에러중 하나가 css파일을 임포트해서 적용을 시켜야하는데 임포트를 하면 에러가 났다. 그래서 처음에 해결방안을 찾아보다가 적용했던 방법은</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../assets/css.css'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 변수에 담아서 사용을 했다.<br>\n하지만 그래도 부족했고 import를 하는 방법을 찾아보다가 declaration파일을 작성하는 방법을 찾았다\n일단 src디렉토리에 declaration.d.ts 파일을 생성한다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//declaration.d.ts</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'*.scss'</span></code></pre></div>\n<p>이러면 스타일파일을 임포트 했을때 에러가 잡힌다.</p>\n<h3 id=\"usestate에서-함수호출-넣기-함수넣기\" style=\"position:relative;\"><a href=\"#usestate%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%ED%98%B8%EC%B6%9C-%EB%84%A3%EA%B8%B0-%ED%95%A8%EC%88%98%EB%84%A3%EA%B8%B0\" aria-label=\"usestate에서 함수호출 넣기 함수넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState에서 함수호출 넣기 함수넣기</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>fucn<span class=\"token punctuation\">)</span></code></pre></div>\n<p>아직 직접 사용은 안했지만 이것저것 자료를 찾아보다 확인한 내용인데 useState로 상태의 초깃값을 설정할때 함수와 함수호출을 넣어주게되었을때는 함수를 넣어주면 처음 렌더링될때만 함수가 실행되는데 함수호출을 하게되면 리렌더링할때마다 함수가 호출된다고한다. 이건 다음에 한번 실험을 해봐야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">fucn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"useeffect-뒷정리-해주고-스크롤-이벤트-감지\" style=\"position:relative;\"><a href=\"#useeffect-%EB%92%B7%EC%A0%95%EB%A6%AC-%ED%95%B4%EC%A3%BC%EA%B3%A0-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B0%90%EC%A7%80\" aria-label=\"useeffect 뒷정리 해주고 스크롤 이벤트 감지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect() 뒷정리 해주고 스크롤 이벤트 감지</h3>\n<p>스크롤 위치 감지 이벤트발생 기능을 구현하면서도 꽤 내용들이 많이나왔다. 처음에 적용했던 방법은 useEffect에서 윈도우에 스크롤 이벤트를 걸어주고 그스크롤이벤트는 스크롤이 어느정도 내려가면 상태를 바꿔주는 이벤트였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> listenToScroll<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">listenToScroll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> winScroll <span class=\"token operator\">=</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop\n  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span>\n    document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span>\n    document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight\n\n  <span class=\"token keyword\">const</span> scrolled <span class=\"token operator\">=</span> winScroll <span class=\"token operator\">/</span> height\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isTop <span class=\"token operator\">&amp;&amp;</span> scrolled <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsTop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isTop <span class=\"token operator\">&amp;&amp;</span> scrolled <span class=\"token operator\">></span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsTop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자꾸 근데 상태값을 올바르게 체크못하고 상태값을 계속 바꾸는 상황이 생겨서 고민을 해보다가 처음 window에 이벤트가 걸릴때 그떄의 상태값만 기억하는것처럼 결과가 나와서 여러 방법들을 시도해보았다. 그러다가 찾은 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> listenToScroll<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> listenToScroll<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isTop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>상태값이 바뀔때 이벤트를 다시 거는데 뒷정리함수로 리무브이벤트리스너를 해준다. 조금 더 공부하고 이해를 해야할것같은 부분이었다. 뒷정리 함수 내용도 다시 정리해야겠다.</p>\n<h3 id=\"dom언마운트-시-애니메이션\" style=\"position:relative;\"><a href=\"#dom%EC%96%B8%EB%A7%88%EC%9A%B4%ED%8A%B8-%EC%8B%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98\" aria-label=\"dom언마운트 시 애니메이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM언마운트 시 애니메이션</h3>\n<p>상태값에 따라 DOM이 마운트되고 언마운트되는 컴포넌트가 있었는데 애니메이션을 주려고 css animation을 적용시켜서 만들었다. 그런데 마운트시에는 애니메이션이 잘 적용이 되었지만 언마운트때는 DOM자체가 없어지므로 애니메이션이 적용이 안되었다. 그래서 fadeIn과 fadeOut 두 가지의 애니메이션을 만들고 상태값에 따라 각각 다른 애니메이션을 적용해주었으며 부모에서 받은 값으로 그 해당 컴포넌트의 상태값을 컨트롤해주는 방법을 적용시키고 찾아보니 onAnimationEnd라는 속성이 있어서 적용해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//부모의 상태 내려주기</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ScrollTopBtn</span></span> <span class=\"token attr-name\">show</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">//애니메이션 적용 컴포넌트</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ScrollTopBtn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> show <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>shouldRender<span class=\"token punctuation\">,</span> setRender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">)</span> <span class=\"token function\">setRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onAnimationEnd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>show<span class=\"token punctuation\">)</span> <span class=\"token function\">setRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    shouldRender <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">onAnimationEnd</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onAnimationEnd<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          animation<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>show <span class=\"token operator\">?</span> <span class=\"token string\">'fadeIn'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'fadeOut'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 1s</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 DOM이 사라질때도 애니메이션이 잘 적용이 되었다.</p>\n<h3 id=\"css-이미지-크기\" style=\"position:relative;\"><a href=\"#css-%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%81%AC%EA%B8%B0\" aria-label=\"css 이미지 크기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css 이미지 크기</h3>\n<p>프로젝트 진행중 라이브러리 내에서 flexbox로 레이아웃을 잡고 그 내용들을 image들로 채우는데 자꾸 이미지들이 width값을 아무리 설정해줘도 일정 넓이에서 늘어나지 않았다. 이유는 정확히 모르겠다 flex를 없애면 잘 적용이되나 flex만 있다면 width값이 늘어나지 않았다. 그래서 사용한 방법이 한번 min-width값을 주니까 일정 넓이값보다 커지고 그값이 적용이 되었다.</p>\n<h3 id=\"props전달-중-비구조할당에서\" style=\"position:relative;\"><a href=\"#props%EC%A0%84%EB%8B%AC-%EC%A4%91-%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%95%A0%EB%8B%B9%EC%97%90%EC%84%9C\" aria-label=\"props전달 중 비구조할당에서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>props전달 중 비구조할당에서</h3>\n<p>대게 부모에서 자식으로 props를 전달할 때 자식에서 비구조할당을 통해 props를 편하게 받는다.\n리액트에서 사용자 지정컴포넌트에 속성을 전달할 경우 자식에서는 한 객체안에 그 속성들을 내려받는데 그 객체를 props라고 하는데</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 부모</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">props</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>프랍스<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// 자식</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">child</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\nprops<span class=\"token punctuation\">.</span>props <span class=\"token comment\">// 프랍스</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">child</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\nprops <span class=\"token comment\">// 프랍스</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 아래처럼 비구조할당을하여 간편하게 접근을 하는데 전개 연산자로 내려줄 시</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 부모</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">one</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>하나<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">two</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>둘<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">three</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>셋<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// 자식</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">child</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>one<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\none <span class=\"token comment\">// 하나</span>\nrest <span class=\"token comment\">// {two: '둘', three: '셋'}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 일부만 명시해주고 전개연산자를 사용하게되면 명시하지않은 프랍스들은 rest에 객체로 담기게 된다.\n몰랐던 부분인데 이번에 학습하면서 알게되었다.</p>\n<h3 id=\"css에서-중간위치-잡기\" style=\"position:relative;\"><a href=\"#css%EC%97%90%EC%84%9C-%EC%A4%91%EA%B0%84%EC%9C%84%EC%B9%98-%EC%9E%A1%EA%B8%B0\" aria-label=\"css에서 중간위치 잡기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css에서 중간위치 잡기</h3>\n<p>보통 부모의 기준에서 위아래 중간에 위치시키려면 relative속성을 부모에게 주고 자식도 포지션 속성을 준 후 top:50% left:50% 이런식으로 준다 하지만 자식의 크기만큼의 공간이 있기에 정확히 중앙으로 가지 않는다.\n그때 추가해야할 속성이</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.center</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>트랜스폼 트랜스레이트를 추가해줘서 크기를 고려한 중앙으로 정렬시킨다. 몇번 사용하였지만 필요할때 깜빡하여서 다시 정리를 해본다.</p>\n<h3 id=\"타-url로-보내기\" style=\"position:relative;\"><a href=\"#%ED%83%80-url%EB%A1%9C-%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"타 url로 보내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타 url로 보내기</h3>\n<p>만약 모바일 기기로 해당 페이지를 접속했을시 타 페이지로 redirection 시키는 기능이 있어서 알아보았다. 일단 모바일 기기로 접속했는지를 확인해야했고, 타 페이지로 redirection시키는 방법을 알아야 했다.</p>\n<h4 id=\"react-device-detect\" style=\"position:relative;\"><a href=\"#react-device-detect\" aria-label=\"react device detect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-device-detect</h4>\n<p>찾아보니 디바이스 디택트라는 라이브러리를 알게되었는데 모바일로 접속했는지, 데스크탑으로 접속했는지를 boolean으로 반환해서 확인해주고 뿐만아니라 어떤기기로 접속했는지 어떤 브라우저를 사용했는지 확인해주는 기능들이 많았다. 매우 유용하게 쓸 수 있는 라이브러리 였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isMobile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-device-detect'</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//모바일로 접속했으면 실행</span>\n  <span class=\"token comment\">//데스크탑이면 false므로 비 실행</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"windowlocationhref\" style=\"position:relative;\"><a href=\"#windowlocationhref\" aria-label=\"windowlocationhref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>window.location.href</h4>\n<p>리다이렉션 시킬 때 window.location.href = ‘url’ 을 해주면 해당 url로 리다이렉션을 시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`jsx\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>isMobile<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-device-detect'</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nwindow<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span> <span class=\"token string\">\"해당url\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 하면 모바일로 접속하면 해당 url로 리다이렉션 시키는 기능을 구현할 수 있다.</p>\n<h3 id=\"일정-박스안에-텍스트가-넘칠-때-처리하는-방법\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EC%A0%95-%EB%B0%95%EC%8A%A4%EC%95%88%EC%97%90-%ED%85%8D%EC%8A%A4%ED%8A%B8%EA%B0%80-%EB%84%98%EC%B9%A0-%EB%95%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"일정 박스안에 텍스트가 넘칠 때 처리하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일정 박스안에 텍스트가 넘칠 때 처리하는 방법</h3>\n<p>글자들을 보면 긴 글자들이 어느정도 채워줬으면 …으로 잘리거나 그냥 잘리거나 하는 경우가 있다. 처음에는\n그 기능은 자바스크립트로 계산해서 하는줄 알았는데 그럴 수 있겠지만 css로도 처리하는 방법이 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.classname</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>overflow,white-space, ellipsis 속성을 추가하면 그 공간이 넘칠 시 나머지 글자들은 … 처리가 된다 단 오버플로우 히든 속성과 함꼐 사용해야한다.</p>\n<h4 id=\"여러줄-지정할-때\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC%EC%A4%84-%EC%A7%80%EC%A0%95%ED%95%A0-%EB%95%8C\" aria-label=\"여러줄 지정할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러줄 지정할 때</h4>\n<p>위와같이 적용하면 한줄이 넘칠 때 나머지 글자들이 … 처리되는데 두 줄이나 세 줄을 지정하고 싶을 수도 있다 그 때 사용하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.classname</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-line-clamp</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 줄 수 */</span>\n  <span class=\"token property\">-webkit-box-orient</span><span class=\"token punctuation\">:</span> vertical<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">word-wrap</span><span class=\"token punctuation\">:</span> break-word<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 하면 두 줄을 넘길 떄 글자 처리가 가능하다 단 브라우저 호환성은 고려해야한다. 더 세부적인 처리 같은건 js를 동반해야 가능할것 같다.</p>\n<h2 id=\"가격-나타낼떄-콤마붙히고-원-단위로-자르기\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EA%B2%A9-%EB%82%98%ED%83%80%EB%82%BC%EB%96%84-%EC%BD%A4%EB%A7%88%EB%B6%99%ED%9E%88%EA%B3%A0-%EC%9B%90-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EC%9E%90%EB%A5%B4%EA%B8%B0\" aria-label=\"가격 나타낼떄 콤마붙히고 원 단위로 자르기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가격 나타낼떄 콤마붙히고 원 단위로 자르기</h2>\n<p>보통 가격에 대한 데이터를 받을떄 number 타입으로 받게된다. 만원이라면 10000 오천원이라면 5000 이런식으로 받는데 보여주는건 10,000 이나 5,000 로 콤마를 천단위로 끊어서 붙여주고 싶을떄도 있고 끝마다 5,000원이나 5,000₩ 이렇게 붙이고 싶을떄가 있을것이다. 그래서 자바스크립트에 분명 활용할 메소드가 있다고 생각해서 찾아봤다.</p>\n<h3 id=\"tolocalestring\" style=\"position:relative;\"><a href=\"#tolocalestring\" aria-label=\"tolocalestring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toLocaleString</h3>\n<p>toLocaleString 메소드는 어떠한 숫자의 타입에 형식을 넣어주고 형태를 변환해주는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">5000</span>\n<span class=\"token keyword\">const</span> change <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5,000</span>\n<span class=\"token keyword\">typeof</span> change <span class=\"token comment\">// string</span></code></pre></div>\n<p>특정 조건을 넣어주지 않았을떄 천단위로 콤마를 찍어주고 타입은 스트링으로 변하게 된다.\n그 후 ₩를 붙이고싶다면 다음과같이 활용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>price<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleStribg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ₩<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>숫자형태의 데이터가 원하는 형태로 바뀌는것을 확인할 수 있다.</p>\n<h2 id=\"사용자가-스크롤-내리는지-올리는지-감지\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EB%82%B4%EB%A6%AC%EB%8A%94%EC%A7%80-%EC%98%AC%EB%A6%AC%EB%8A%94%EC%A7%80-%EA%B0%90%EC%A7%80\" aria-label=\"사용자가 스크롤 내리는지 올리는지 감지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자가 스크롤 내리는지 올리는지 감지</h2>\n<p>어떤 웹사이트들에서는 스크롤을 내리거나 올릴떄 사용자의 스크롤액션에 따라 네비게이션바가 나타나고 사라진다거나 다른 UI를 적용하는 웹들이 있다. 그 기능을 구현해보려고 이것저것 시도해보았다. 그러다가 찾은 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nav</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checkScroll<span class=\"token punctuation\">,</span> setCheckScroll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 스크롤액션을 체크할 상태를 하나 관리</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> prevScrollpos <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pageYOffset\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onscroll</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> currentScrollPos <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pageYOffset\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevScrollpos <span class=\"token operator\">></span> currentScrollPos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsDown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsDown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      prevSCrollpos <span class=\"token operator\">=</span> currentScrollPos\n    <span class=\"token punctuation\">}</span>\n\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> onscroll<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일단 스크롤액션에 따른 변경사항을 감지하기 위해 상태관리를 한다.<br>\n그리고 스크롤을 내리는지 올리는지 조건을 비교하기위한 함수를 하나 만들어아하는데,\n일단 변수 prevScrollpos에 현재 스크롤위치를 담는다, 그리고 onscroll이라는 함수에서 currentScrollPos에 또 현재 스크롤의 위치를 담는다. 그 후 prevScrollpos 와 currentScrollPos를 비교하여 스크롤의 값에따라 내리는지, 올리는지 비교가 가능하다. 그에따른 실행내용을 넣어주고 상태를 바꿔준다. 그리고 useEffect안에서 스크롤 이벤트를 넣어준다.</p>","frontmatter":{"title":"배움 정리","date":"April 02, 2020"}}},"pageContext":{"slug":"/migration/2020-04-28---learned_at_4-28/","previous":{"fields":{"slug":"/migration/2020-03-30---code_spliting/"},"frontmatter":{"title":"코드 스플리팅","category":"javascript","draft":false}},"next":{"fields":{"slug":"/migration/2020-04-02---function/"},"frontmatter":{"title":"자바스크립트 함수","category":"javascript","draft":false}}}},"staticQueryHashes":["3128451518","3498048237"]}