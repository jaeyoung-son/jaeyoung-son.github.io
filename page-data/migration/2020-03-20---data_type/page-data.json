{"componentChunkName":"component---src-templates-blog-post-js","path":"/migration/2020-03-20---data_type/","result":{"data":{"site":{"siteMetadata":{"title":"재영 블로그","author":"jaeyoung-son","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a009101f-2a9a-5366-9f10-e3791e41d41d","excerpt":"원시타입과 참조형 타입 원시타입 원시타입: Primitive Data Type 원시타입에는 Number, Boolean, String, Symbol, null, undefined 가 있다. 원시타입은 변수에 값 자체가 저장된다. 참조타입 참조타입: Reference Data Type 참조타입에는 Array, Object…","html":"<p>원시타입과 참조형 타입</p>\n<h2 id=\"원시타입\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%ED%83%80%EC%9E%85\" aria-label=\"원시타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시타입</h2>\n<p>원시타입: Primitive Data Type<br>\n원시타입에는 Number, Boolean, String, Symbol, null, undefined 가 있다.<br>\n원시타입은 변수에 값 자체가 저장된다.</p>\n<h2 id=\"참조타입\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%ED%83%80%EC%9E%85\" aria-label=\"참조타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조타입</h2>\n<p>참조타입: Reference Data Type<br>\n참조타입에는 Array, Object가 있다.<br>\n참조타입은 변수에 값이 저장되는 것이 아니라, 값이 저장된 메모리 주소를 참조하고 있다. 즉 값이 저장된 공간은 따로있고 변수에는 이 메모리 주소를 가지고 있는것. 자바스크립트는 메모리 위치에 직접 접근하는 것을 허용하지 않으므로 객체의 메모리 공간을 직접 조작하는 일이 불가능하다. 만약 객체를 조작한다면 객체 자체가 아니라 해당 객체에 대한 참조를 조작하는 것이다.</p>\n<h2 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map</h2>\n<p>맵이란 객체와 비슷하게 키 데이터 항목들의 모음이다. 맵과 객체의 가장 큰 차이점은 맵의 키는 어떠한 타입이든 허용한다.</p>\n<h3 id=\"맵의-메소드들\" style=\"position:relative;\"><a href=\"#%EB%A7%B5%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C%EB%93%A4\" aria-label=\"맵의 메소드들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵의 메소드들</h3>\n<ul>\n<li>new Map() - 새로 맵을 만듬 인스턴스화</li>\n<li>map.set(key, value) - 키와 값을 저장한다.</li>\n<li>map.get(key) - 키의 값을 반환한다. 키가 존재하지 않다면 undefined를 반환한다.</li>\n<li>map.has(key) - 키가 존재한다면 true를 반환하고 존재하지 않다면 false를 반환한다.</li>\n<li>map.delete(key) - 해당 키에대한 값을 지운다.</li>\n<li>map.clear() - 맵의 모든것을 지운다.</li>\n<li>map.size - 현재 요소들의 개수를 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'안녕하세용'</span><span class=\"token punctuation\">)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"안녕하세용\"</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'재영이'</span><span class=\"token punctuation\">)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"재영이\"</span>\nmap<span class=\"token punctuation\">.</span>size <span class=\"token comment\">// 2</span></code></pre></div>\n<h3 id=\"주의할점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90\" aria-label=\"주의할점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할점</h3>\n<p>map[key] 이렇게 접근하는것은 올바른 접근방식이 아니다.\n이렇게 써도 작동은 하지만 이 경우 순수한 자바스크립트 객체로 취급하기 때문이다. 따라서 맵을 사용하려면 set, get 을 사용해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">map\n  <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'str1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bool1'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>맵 메소드 체이닝</p>\n<h3 id=\"맵의-반복\" style=\"position:relative;\"><a href=\"#%EB%A7%B5%EC%9D%98-%EB%B0%98%EB%B3%B5\" aria-label=\"맵의 반복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵의 반복</h3>\n<p>맵의 반복과 관련하여 3가지 메소드가 있다. 기본적으로 for..of 로 사용된다.</p>\n<ul>\n<li>map.keys() - 반복한 키를 반환한다.</li>\n<li>map.values() - 반복한 값을 반환한다.</li>\n<li>map.entries() - 반복한 [키, 밸류] 를 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> recipeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'cucumber'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'tomatoes'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'onion'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> vegetable <span class=\"token keyword\">of</span> recipeMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vegetable<span class=\"token punctuation\">)</span> <span class=\"token comment\">// cucumber, tomatoes, onion</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> entry <span class=\"token keyword\">of</span> recipeMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//  recipeMap.entries() 와 같다</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (2) [\"cucumber\", 500][\"tomatoes\", 350][\"onion\", 50]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"set\" style=\"position:relative;\"><a href=\"#set\" aria-label=\"set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set</h2>\n<p>set는 특별한타입의 모음. 키가 존재하지않고 각각의 값들은 한번만 들어갈 수 있다. 즉 중복이 안된다.</p>\n<h3 id=\"세트의-메소드들\" style=\"position:relative;\"><a href=\"#%EC%84%B8%ED%8A%B8%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C%EB%93%A4\" aria-label=\"세트의 메소드들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세트의 메소드들</h3>\n<ul>\n<li>new Set (iterable) - 새로운 세트를 만든다. 만약 배열같은 반복가능한 값이 들어오면 값을 카피해서 세트로 넣는다.</li>\n<li>set.add(value) - 값을 넣는다. 세트 스스로 리턴한다.</li>\n<li>set.delete(value) - 값을 지운다. 특정 값을 넣었을때 값이 존재하면 true를 리턴하고 그렇지않다면 false를 리턴한다.</li>\n<li>set.has(value) - 값이 존재한다면 true 아니라면 false리턴</li>\n<li>set.clear() - 세트의 모든것을 지운다.</li>\n<li>set.size - 요소들의 갯수를 센다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> jy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'재영'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> koko <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'코코'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> popo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'포포'</span> <span class=\"token punctuation\">}</span>\n\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jy<span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>koko<span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>popo<span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jy<span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>popo<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> who <span class=\"token keyword\">of</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>who<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 재영 . 코코. 포포</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>세트는 배열이 될 수 있어 arr.find를 사용하여 중복을 확인할 수 있으나 배열의 모든 전체 요소를 검사하므로 성능이떨어진다. set 내부적으로 최적화 되어있다.</p>\n<h3 id=\"세트의-반복\" style=\"position:relative;\"><a href=\"#%EC%84%B8%ED%8A%B8%EC%9D%98-%EB%B0%98%EB%B3%B5\" aria-label=\"세트의 반복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세트의 반복</h3>\n<p>세트의 반복 또한 맵의 반복과 비슷하다.</p>\n<ul>\n<li>set.keys() - 반복한 값을 반환한다.</li>\n<li>set.values() - 반복한 값을 반환한다. set.keys와 같은데 맵과의 호환성을 위해 있다고한다.</li>\n<li>set.entries() - 반복한 [밸류, 밸류] 를 반환한다. ?</li>\n</ul>\n<p>맵은 객체와 비슷하고 세트는 배열과 비슷하나 다른 특징을 가졌다.</p>","frontmatter":{"title":"데이터 타입","date":"March 20, 2020"}}},"pageContext":{"slug":"/migration/2020-03-20---data_type/","previous":{"fields":{"slug":"/migration/2020-03-19---git_ajax/"},"frontmatter":{"title":"깃에 관하여","category":"git","draft":false}},"next":{"fields":{"slug":"/migration/2020-03-24---eventBubbling/"},"frontmatter":{"title":"이벤트 전파","category":"javascript","draft":false}}}},"staticQueryHashes":["3128451518","3498048237"]}