{"componentChunkName":"component---src-templates-blog-post-js","path":"/migration/2020-04-02---function/","result":{"data":{"site":{"siteMetadata":{"title":"재영 블로그","author":"jaeyoung-son","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2130a884-d755-5645-9904-b3147ab46280","excerpt":"자바스크립트에서 함수는 1급이다. 함수 자체는 값처럼 취급될 수 있기에 리턴이 가능함. 또한 리턴 뿐만 아니라 인자로 전달될 수 있다. 이 또한 1급이기 때문에 콜백함수 맵함수의 인자로 el … el *2 까지 인자로 함수를 넣고 있다. 평소에 자연스럽게 쓰던것. 이렇게 runCallback…","html":"<p>자바스크립트에서 함수는 1급이다. 함수 자체는 값처럼 취급될 수 있기에 리턴이 가능함. 또한 리턴 뿐만 아니라 인자로 전달될 수 있다. 이 또한 1급이기 때문에</p>\n<h2 id=\"콜백함수\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98\" aria-label=\"콜백함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> el <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>맵함수의 인자로 el … el *2 까지 인자로 함수를 넣고 있다. 평소에 자연스럽게 쓰던것.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runCallback</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">func</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'콜백함수 실행하기'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실행완료'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 runCallback이라는 함수에 인자로 함수를 전달하면 전달받은 함수를 실행시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나는 콜백이야'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runCallback</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 콜백함수 실행하기</span>\n<span class=\"token comment\">// 나는 콜백이야</span>\n<span class=\"token comment\">// 실행완료</span></code></pre></div>\n<p>인자로 받은 함수에 인자를 넣는것도 가능하고, 인자로 받은 함수의 리턴값을 사용하는것 역시 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runCallback</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">func</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> innerValue <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>innerValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'인자로 받은 값'</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 인자로 받은 값 123</span></code></pre></div>\n<p>인자로 받은 함수의 리턴결과를 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runCallback</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">func</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'콜백 결과'</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'콜백이 실행되고'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'콜백 리턴이다'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 콜백이 실행되고</span>\n<span class=\"token comment\">// 콜백 결과 콜백 리턴이다</span></code></pre></div>\n<p>콜백함수에 인자를 전달하고 리턴값을 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runCallback</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">func</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> innerValue <span class=\"token operator\">=</span> <span class=\"token string\">'내부값'</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>innerValue<span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'콜백 결과'</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'콜백이 실행되고'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token string\">'더하기 콜백의 리턴'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 콜백이 실행되고</span>\n<span class=\"token comment\">// 콜백 결과내부값더하기 콜백의 리턴</span></code></pre></div>\n<p>이렇게 인자로 함수를 받고 그 함수에 인자를 넣고 리턴값을 자유자재로 활용한다면 많은 상황에서 코드의 재사용성과 함수 확장성을 늘릴수 있을것이다. 익숙해지도록 연습을 많이 해보아야겠다고 느꼈다.</p>\n<h2 id=\"커링패턴\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A7%81%ED%8C%A8%ED%84%B4\" aria-label=\"커링패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커링패턴</h2>\n<p>함수가 리턴하는 값이 내부 함수이고 함수에서 함수의 인자도 함수스코프 변수의 일종으로 처리된다. 내부함수에서 외부함수의 인자에 접근이 가능하다. 이러한 형태로 함수를 구성하는것을 커링(currying)이라고 하고 이런 형태의 함수를 커리 함수(curried function)라 한다. 말로는 어려우니 직접 보기</p>\n<p>함수를 리턴하는 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> arg2\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>curry함수가 리턴하는 함수는 맥락상 클로져함수가 된다.<br>\n화살표함수로 고치면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curry</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arg1</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">arg2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> arg2\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>curry함수는 값을 바로 리턴하고 있으며 그 값은 내부함수<br>\n화살표함수가 값을 바로 리턴한다면 중괄호와 return키워드를 생략할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curry</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arg1</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">arg2</span> <span class=\"token operator\">=></span> arg1 <span class=\"token operator\">+</span> arg2</code></pre></div>\n<p>간단한 적용 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">devision</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">by</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">target</span> <span class=\"token operator\">=></span> target <span class=\"token operator\">/</span> by\n\n<span class=\"token keyword\">const</span> devideByTen <span class=\"token operator\">=</span> <span class=\"token function\">devision</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> devideByTwo <span class=\"token operator\">=</span> <span class=\"token function\">devision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">devideByTen</span><span class=\"token punctuation\">(</span><span class=\"token number\">234</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 23.4</span>\n<span class=\"token function\">devideByTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">5670</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2835</span></code></pre></div>\n<p>devision 함수는 나눗셈 연산을 커링으로 처리하는 간단한 함수이다.<br>\n커리함수에서 처음에 받는 인자는 보통 설정이나 옵션등에 해당하는 값이다. 나중에 받는 인자는 적용대상, 값 등에 해당하는 값이다. 위의 devision 함수가 처음 받는 값은 ‘이후 값을 몇으로 나눌건지’에 대한 설정값 이라고 보면 되고, 커링의 결과로 나온 함수들은 커리함수가 받은 설정값을 기억하면서 실제로 값을 처리하는 작업을 한다.</p>","frontmatter":{"title":"자바스크립트 함수","date":"April 02, 2020"}}},"pageContext":{"slug":"/migration/2020-04-02---function/","previous":{"fields":{"slug":"/migration/2020-04-28---learned_at_4-28/"},"frontmatter":{"title":"배움 정리","category":"learn","draft":false}},"next":{"fields":{"slug":"/migration/2020-04-03---scss/"},"frontmatter":{"title":"스타일링 정복기","category":"javascript","draft":false}}}},"staticQueryHashes":["3128451518","3498048237"]}