{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2021-01-25---browser/","result":{"data":{"site":{"siteMetadata":{"title":"재영 블로그","author":"jaeyoung-son","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"264f4c86-422f-55b0-a781-deb32a97f367","excerpt":"브라우저 사용자가 연결된 주소의 서버에 데이터 요청을 하게 되면 서버로부터 데이터를 다운받은 것을 가지고 웹브라우저가\n그것을 해석해서 사용자가 보는 UI를 완성 해줍니다. 따라서 네트워크가 중요합니다. 브라우저의 기본 구조 사용자 인터페이스\n주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분입니다. 브라우저 엔진\n사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어합니다. 렌더링 엔진\n요청한 콘텐츠를 표시. 예를 들어 HTML을 요청하면 HTML…","html":"<h2 id=\"브라우저\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80\" aria-label=\"브라우저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저</h2>\n<p>사용자가 연결된 주소의 서버에 데이터 요청을 하게 되면 서버로부터 데이터를 다운받은 것을 가지고 웹브라우저가\n그것을 해석해서 사용자가 보는 UI를 완성 해줍니다. 따라서 네트워크가 중요합니다.</p>\n<h3 id=\"브라우저의-기본-구조\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"브라우저의 기본 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저의 기본 구조</h3>\n<ol>\n<li>사용자 인터페이스\n주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분입니다.</li>\n<li>브라우저 엔진\n사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어합니다.</li>\n<li>렌더링 엔진\n요청한 콘텐츠를 표시. 예를 들어 HTML을 요청하면 HTML과 CSS를 파싱하여 화면에 표시합니다.</li>\n<li>통신\nHTTP요청과 같은 네트워크 호출에 사용됩니다.</li>\n<li>UI 백엔드\n콤보 박스와 창 같은 기본적인 장치를 그립니다. 플랫폼에서 명시하지 않은 일반적인 인터페이스로서, OS 사용자 인터페이스 체계를 사용합니다.</li>\n<li>자바스크립트 해석기\n말 그대로 자바스크립트 코드를 해석하고 실행합니다.</li>\n<li>자료 저장소\n자료를 저장하는 계층입니다.</li>\n</ol>\n<h3 id=\"파싱-이란\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%8B%B1-%EC%9D%B4%EB%9E%80\" aria-label=\"파싱 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파싱 이란??</h3>\n<p>파싱이란 브라우저가 코드를 이해하고 사용할 수 있는 구조로 변환하는 것을 의미합니다.\n파싱 결과는 보통 문서 구조를 나타내는 노드 트리인데 파싱 트리 또는 문법 트리라고 부릅니다.</p>\n<h3 id=\"파싱과-script-태그\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%8B%B1%EA%B3%BC-script-%ED%83%9C%EA%B7%B8\" aria-label=\"파싱과 script 태그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파싱과 script 태그</h3>\n<p>자바스크립트인 script태그를 만나면 스크립트가 해석 및 실행되는 동안 문서의 파싱은 중단됩니다.\n스크립트가 외부에 있는 경우 우선 네트워크로부터 자원을 가져와야 하는데 이 또한 실시간으로 처리되고 자원을 받을 때까지\n파싱은 중단됩니다.\n스타일 시트는 이론적으로 DOM트리를 변경하지 않기 때문에 문서 파싱을 기다리거나 중단하지 않습니다.\n따라서 스크립트 파일을 먼저 로드하고 스크립트가 문서를 파싱하는 동안 스타일 정보를 요청하는 경우라면 문제가 생깁니다.\n스크립트가 문서를 파싱하는동안 브라우저는 다른 작업을 수행하지 않기 때문에 스타일이 파싱되지 않은 상태가 되고 이렇게 된다면\n레이아웃이 제대로 구성되지 않은 상태로 사용자에게 뷰를 제공할 확률이 높아져 사용자 경험을 떨어뜨리는 결과를 초래할 수 있습니다.\n이러한 문제가 있기에 스크립트 소스를 body태그 끝에 두는 것을 권장합니다.</p>\n<h3 id=\"스크립트-로드-async-defer\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A1%9C%EB%93%9C-async-defer\" aria-label=\"스크립트 로드 async defer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크립트 로드 async, defer</h3>\n<p>body태그의 마지막에 스크립트 태그를 삽입하는 방식이 오래된 브라우저에서도 잘 작동하게 합니다.\n다만 head 영역에 스크립트가 삽입되거나 외부의 파일에 정의되어 있다면 이벤트 연결은 문서의 로드시점에 맞게 처리해야 하는데\n이 경우에 모던 브라우저에서는 defer,async속성을 사용할 수 있습니다.</p>\n<ul>\n<li>async 속성이 추가된 경우\nasync 속성이 명시된 경우 브라우저가 페이지를 파싱하는 동안 스크립트가 실행됩니다. 즉 스크립트 파일이 비동기적으로 실행됩니다.\nHTML 구문 해석기가 스크립트 태그에 도달한 지점에서 스크립트를 실행하기 위해 파싱을 중단할 필요가 없습니다.\n따라서 HTML 구문 분석과 병행해서 스크립트를 가져온 후 스크립트가 준비가 될 때마다 즉시 실행이 가능해지는데,\n실행의 순서가 다운로드 완료 시점에 의해 결졍되므로 실행 순서가 중요한 스크립트들에 async를 사용할떄는 유의해야 합니다.</li>\n<li>defer 속성이 추가된 경우의 실행\nasync 속성은 명시되어 있지 않고 defer 속성만 명시된 경우라면 브라우저가 페이지의 파싱을 모두 끝내면\n스크립트가 실행됩니다.\n비동기적으로 로드된 스크립트와 마찬가지로 HTML 구문 분석이 실행되는 동안 HTML해석을 방해하지 않고\n스크립트 파일을 다운로드 할 수 있습니다.\nasync속성과의 차이점은 HTML 구문 분석이 완료되기 전에 스크립트 다운로드가 완료 되더라도\n구문 해석이 완료될 때까지 스크립트는 실행되지 않습니다.</li>\n</ul>\n<h3 id=\"렌더링-과정\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\" aria-label=\"렌더링 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 과정</h3>\n<ol>\n<li>브라우저는 HTML, stylesheets를 해석합니다. 그리고 HTML 문서의 해석이 끝나면 DOM 트리를 만들고\nstylesheets 문서의 해석이 끝나면 스타일 규칙 CSSOM Tree을 만듭니다.</li>\n<li>만든 DOM 트리와 스타일 규칙을 합쳐 렌더 트리를 만듭니다. 여기에서 flow(배치)과정이 실행되어 각 요소들의 레이아웃을 위치시킵니다.</li>\n<li>Layout 단계로 와서 브라우저의 뷰포트 내에서 각 노드들의 정확한 위치와 크기를 계산합니다.\n생성된 렌더트리 노드들이 가지고 있는 스타일과 속성에 따라서 브라우저 화면의 어느 위치에 어느 크기로 출력될지\n게산하는 단계입니다.\n뷰포트 크기가 달라질 경우 매번 계산을 다시합니다.</li>\n<li>Layout 게산이 완료되면 Paint과정으로 요소들을 실제 화면에 그립니다.\n이전 단계에서 이미 요소들의 위치, 크기, 스타일 계싼이 완료된 렌더트리를 이용해 실제 픽셀 값을 채워넣습니다.\n이 과정에서 텍스트, 색, 이미지, 그림자 효과등이 처리되어 그려지는데, 처리해야 하는 스타일이 복잡할수록 Paint 단계에\n소요되는 시간이 늘어납니다.</li>\n</ol>\n<h3 id=\"reflow\" style=\"position:relative;\"><a href=\"#reflow\" aria-label=\"reflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflow</h3>\n<p>렌더링 과정을 거친 뒤 최종적으로 페이지가 그려진다고 해서 끝나는것이 아닙니다.\n특정 액션이나 이벤트에 따라 html요소의 크기나 위치, 레이아웃 등을 수정하면 그에 영향을 받는 자식이나 부모들을\n포함하여 위에서 설명한 Layout 과정을 다시 수행합니다.\n그러면 렌더트리와 각 요소들의 크기 및 위치를 다시 계산하는데 이 과정을 Reflow라고 합니다.</p>\n<h4 id=\"reflow가-일어나는-예시\" style=\"position:relative;\"><a href=\"#reflow%EA%B0%80-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EC%98%88%EC%8B%9C\" aria-label=\"reflow가 일어나는 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflow가 일어나는 예시</h4>\n<ul>\n<li>페이지 초기 렌더링 시</li>\n<li>윈도우 리사이징 시 (뷰포트 크기 변화)</li>\n<li>노드 추가 또는 제거</li>\n<li>요소의 위치, 크기 변경(top, left, margin, padding, border, width 등)</li>\n<li>폰트 변경과 이미지 크기 변경</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reflowEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stlye<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">'500px'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"브라우저, DNS","date":"January 25, 2021"}}},"pageContext":{"slug":"/development/2021-01-25---browser/","previous":{"fields":{"slug":"/migration/2020-12-17---learn_1217/"},"frontmatter":{"title":"학습한것들 정리","category":"learn","draft":false}},"next":null}},"staticQueryHashes":["3128451518","3498048237"]}